---
title: Neural Network AR Models
date: 10/12/2023
date-modified: 10/17/2023
---

# Setup

```{r setup}
library(tseries)
library(aTSA)
library(forecast)

set.seed(12345)

USAirlines <- read.csv("https://raw.githubusercontent.com/sjsimmo2/TimeSeries/master/usairlines.csv")
passenger <- ts(USAirlines$Passengers, start = 1990, frequency = 12)
train <- subset(passenger, end = length(passenger) - 12)
test <- subset(passenger, start = length(passenger) - 11)
```

# Neural Net Basics

Neural network models are models based on mathematical models of how the brain functions. 

They are organized in a network of **neurons** through **layers**. The input variables are considered the neurons on the **bottom layer**. The output variable is considered the neuron on the **top layer**.

The layers in between are called **hidden layers** transfrom the input variables through activation functions to try and model the output variable.

@fig-basic-neural-net shows a basic neural net structure without a hidden layer.

![Basic Neural Net Structure](images/basic-neural-net){#fig-basic-neural-net}

Once we add a hidden layer, we apply non-linear activation functions in new nodes that get combined into an output.

:::{layout-ncol="2"}
![Hidden Layer Added](images/hidden-layer-1.png)

![Combining the Hidden Layer Output](images/hidden-to-output.png)
:::

# Autoregressive Neural Networks

Neural network models used for forecasting in time series, just have lags of Y in the bottom layer along with other X variables.

![Autoregressive Terms](images/autoregressive-terms.png)

## Number of AR Lags

-   Explore with correlation plots or automatic selection techniques
-   Focus primarily on AR components of the model
-   For seasonal data we typically include **all** lags up throguh one season unless correlation plots say you only need specific ones
-   **Still want to make data stationary first**

If you don't have stationary data, the forecasts will still revert to overall mean far enough into the future.

# Implementing Neural Net AR

```{r neural-net-ar}
set.seed(12345)

nn_model <- nnetar(diff(train, 12), p = 2, P = 3) # <1>
nn_forecast <- forecast::forecast(nn_model, h = 12) # <2>
plot(nn_forecast)
```
1.  `p` refers to number of AR lags and `P` refers to number of seasonal AR lags. By default, the non-linear transformation used is the sigmoid function.
2.  The neural net only knows about **our differenced data** so we need to add back the last 12 observations to get the original scale.

In the background, R automatically adjusts the forecasts to be on the original scale in ARIMA models. However, with neural net models we need to manually adjust the forecasts.

```{r neural-net-forecasts}
pass_forecast <- train[(length(train) - 11):length(train)] + forecast::forecast(nn_model, h = 12)$mean[1:12]

plot(train, main = "US Airline Passengers ARIMA Model Forecasts", xlab = "Date", ylab = "Passengers (Thousands)", xlim = c(1990, 2009), ylim = c(30000, 80000))
lines(pass_forecast, col = "blue")
abline(v = 2007.25, col = "red", lty = "dashed")

nn_error <- test - pass_forecast
nn_MAE <- mean(abs(nn_error))
nn_MAPE <- mean(abs(nn_error) / abs(test)) * 100.0
print(nn_MAE)
print(nn_MAPE)
```