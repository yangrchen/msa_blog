{
  "hash": "04b28a6940a359870ceaefae2acb4e16",
  "result": {
    "markdown": "---\ntitle: \"Linear Algebra: Introduction\"\ndate: 08/07/2023\n---\n\n\n# Vectors\n\nVectors are an ordered list of numbers in either row orientation $\\vec{v} = [v_1, \\ldots, v_n]$ or column orientation $\\vec{v} = \\begin{bmatrix} v_1 \\\\ \\cdots \\\\ v_2 \\end{bmatrix}$.\n\n## Linear Combination\n\nLinear combination of two vectors $\\vec{u}$ and $\\vec{v}$ adds the vectors, possibly with a scalar multiplicatino of one or both of the vectors by constant values $c$ and $d$\n\n$$\nc\\vec{u} + d\\vec{v}\n$$\n\n## Dot Product\n\nAlso known as *inner product*. Takes corresponding entries from $\\vec{u}$ and $\\vec{v}$, multiplies them and sums them $\\sum_{i=1}^{n} u_iv_i$\n\n$$\n\\vec{u} \\cdot \\vec{v} = [u_1, \\ldots, u_n] \\cdot \\begin{bmatrix} v_1 \\\\ \\vdots \\\\ v_n \\end{bmatrix} = \\sum_{i=1}^{n} u_iv_i\n$$\n\n### R Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(geometry)\nlibrary(reticulate)\nuse_condaenv(\"blues_clues\")\n\nu <- c(1, 2)\nv <- c(4, 5)\ndot(u, v)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 14\n```\n:::\n:::\n\n\n### Python Code\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport numpy as np\n\nu = np.array([1, 2])\nv = np.array([4, 5])\nnp.dot(u, v)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n14\n```\n:::\n:::\n\n\n## Orthogonal Vectors\n\nTwo vectors are orthogonal when they are perpendicular to each other. This occurs when the dot product between two vectors is 0.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport matplotlib.pyplot as plt\n\n# Define the two orthogonal vectors\nvector1 = [3, 0]\nvector2 = [0, 2]\n\n# Create a matplotlib figure and axis\nfig, ax = plt.subplots()\n\n# Plot the first vector in blue\nax.quiver(\n    0,\n    0,\n    vector1[0],\n    vector1[1],\n    angles=\"xy\",\n    scale_units=\"xy\",\n    scale=1,\n    color=\"blue\",\n    label=\"Vector 1\",\n)\n\n# Plot the second vector in red\nax.quiver(\n    0,\n    0,\n    vector2[0],\n    vector2[1],\n    angles=\"xy\",\n    scale_units=\"xy\",\n    scale=1,\n    color=\"red\",\n    label=\"Vector 2\",\n)\n\n# Set x and y limits to fit both vectors in the plot\nax.set_xlim(-1, 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(-1.0, 4.0)\n```\n:::\n\n```{.python .cell-code}\nax.set_ylim(-1, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(-1.0, 3.0)\n```\n:::\n\n```{.python .cell-code}\n# Add gridlines\nax.grid()\n\n# Add a legend\nax.legend()\n\n# Add labels and title\nplt.xlabel(\"X-axis\")\nplt.ylabel(\"Y-axis\")\nplt.title(\"Plot of Two Orthogonal Vectors\")\n\n# Show the plot\nplt.show()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## Vector Length\n\nThe length of a vector is the square root of the vector dotted with itself.\n\n$$\n\\lVert \\vec{v} \\rVert = \\sqrt{\\vec{v} \\cdot \\vec{v}}\n$$\n\n### R Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv <- c(4, 5)\nsqrt(dot(v, v))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6.403124\n```\n:::\n:::\n\n\n### Python Code\n\n\n::: {.cell}\n\n```{.python .cell-code}\nv = np.array([4, 5])\nnp.linalg.norm(v)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n6.4031242374328485\n```\n:::\n:::\n\n\n## Unit Vectors\n\nA vector is **unit** is its length is 1. Any vector can be converted toa  unit vector or *normalized* by dividing its entries by its length.\n\n## Angles Between Vectors\n\nThe cosine of the angle $\\theta$ between $\\vec{u}$ and $\\vec{v}$ is the dot product of $\\vec{u}$ and $\\vec{v}$ divided by the product of $\\lVert \\vec{u} \\rVert$ and $\\lVert \\vec{v} \\rVert$.\n\n$$\n\\cos(\\theta) = \\frac{\\vec{u} \\cdot \\vec{v}}{\\lVert \\vec{u} \\rVert \\lVert \\vec{v} \\rVert}\n$$\n\n### Schwarz Inequality\n\n$$\n\\lVert \\vec{u} \\cdot \\vec{v} \\rVert \\leq \\lVert \\vec{u} \\rVert \\lVert \\vec{v} \\rVert\n$$\n\n### Triangle Inequality\n\n$$\n\\lVert \\vec{u} + \\vec{v} \\rVert \\leq \\lVert \\vec{u} \\rVert + \\lVert \\vec{v} \\rVert\n$$\n\n# Matrices\n\nA matrix is a rectangular combination of values arranged as $m$ rows and $n$ columns. The size of a matrix is row major.\n\n$$\nA = \\begin{bmatrix}\n1 & 2 \\\\\n3 & 4 \\\\\n5 & 6\n\\end{bmatrix}\n$$\n\nA is a 3 x 2 matrix\n\n## Transpose\n\nTranspose swaps rows and columns. A transposed row vector is a column vector and vice versa. A transposed matrix $A^T$ converted the rows of $A$ to columns and the columns of $A$ to rows\n\n-   $(A^T)^T = A$\n-   $(A + B)^T = A^T + B^T$\n-   $(cA)^T = cA^T$\n-   $(AB)^T = B^TA^T$",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}