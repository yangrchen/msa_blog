{
  "hash": "94df7cf32e6a672265ac703729e216b9",
  "result": {
    "markdown": "---\ntitle: Prophet Model\ndate: 10/10/2023\ndraft: true\n---\n\n\n# Setup\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tseries)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRegistered S3 method overwritten by 'quantmod':\n  method            from\n  as.zoo.data.frame zoo \n```\n:::\n\n```{.r .cell-code}\nlibrary(aTSA)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'aTSA'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:tseries':\n\n    adf.test, kpss.test, pp.test\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:graphics':\n\n    identify\n```\n:::\n\n```{.r .cell-code}\nlibrary(forecast)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'forecast'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:aTSA':\n\n    forecast\n```\n:::\n\n```{.r .cell-code}\nUSAirlines <- read.csv(\"https://raw.githubusercontent.com/sjsimmo2/TimeSeries/master/usairlines.csv\")\npassenger <- ts(USAirlines$Passengers, start = 1990, frequency = 12)\ntrain <- subset(passenger, end = length(passenger) - 12)\ntest <- subset(passenger, start = length(passenger) - 11)\n```\n:::\n\n\n# Introduction\n\nFacebook's Prophet model is used for forecasting univariate time series by decomposing it into pieces.\n\nProphet breaks up the signal into 3 pieces:\n\n-   Growth / Trend\n-   Season\n-   Holiday\n\n![Prophet Breakdown](images/prophet-signal.png){#fig-prophet-signal}\n\n# Growth / Trend\n\nThe growth / trend component uses trend lines as regressors in the model. Instead of single trends, this trend is **piecewise** using **knots**. The user can specify knots or it is automatically chosen.\n\n![Growth / Trend](images/growth-trend.png){#fig-growth-trend}\n\nTrend can also be a **logarithmic** trend.\n\n# Seasonal\n\nFourier variables are used to account for seasonal patterns. Prophet was originally designed for daily data with weekly and yearly seasonal effects. By default, yearly effects have 10 Fourier pairs and weekly effects have 3 Fourier pairs.\n\n# Holiday\n\nThe holiday effect is just point interventions!\n\n![Holiday - Point (Pulse) Intervention](images/holiday.png){#fig-holiday}\n\n# Prophet Model\n\nIn Prophet, you need to use specific variable names for the model to run. For any date, you need to use `ds`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(prophet)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: Rcpp\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: rlang\n```\n:::\n\n```{.r .cell-code}\nholidays <- data.frame(\n    holiday = \"Sep11\",\n    ds = as.Date(\n        c(\"2001-09-01\", \"2001-10-01\", \"2001-11-01\", \"2001-12-01\", \"2002-01-01\", \"2002-02-01\", \"2002-09-01\")\n    ),\n    lower_window = 0,\n    upper_window = 0\n)\n\nprophet_data <- data.frame(ds = seq(as.Date(\"1990-01-01\"), as.Date(\"2007-03-01\"), by = \"m\"), y = train)\n\n# Make a baseline model flagging our specified holidays as intervention variables\n# Add US country holidays\n# Don't use default seasonality.\n## Specify period to not use daily seasonality and use monthly instead\n## Specify fourier.order to use 6 pairs\nprof <- prophet(holidays = holidays) %>%\n    add_country_holidays(\"US\") %>%\n    add_seasonality(name = \"monthly\", period = 30.5, fourier.order = 6) %>%\n    fit.prophet(prophet_data)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nDisabling weekly seasonality. Run prophet with weekly.seasonality=TRUE to override this.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nDisabling daily seasonality. Run prophet with daily.seasonality=TRUE to override this.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in make_holidays_df(year.list, m$country_holidays): Holidays for US are\nonly supported from 1995 to 2044\n```\n:::\n:::\n\n\nWe build the Prophet model in components--similar to a ggplot.\n\nNote that `lower_window` and `upper_window` extend the intervention to `day - lower` and `day + upper` for **ALL** the days in between in your data. If you have some holidays that last longer than others then you need to specify multiple holidays in the `holidays` argument.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}