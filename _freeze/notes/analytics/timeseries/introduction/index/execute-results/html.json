{
  "hash": "d58610ab2870d7acb1f182bf86681bfd",
  "result": {
    "markdown": "---\ntitle: Introduction to Forecasting & Time Series Structure\ndate: 08/24/2023\ndate-modified: 09/16/2023\n---\n\n\n# Setup {.unnumbered}\n\n:::{.panel-tabset group=\"language\"}\n# R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tseries)\nlibrary(forecast)\nlibrary(tidyverse)\nlibrary(reticulate)\n\nuse_condaenv(\"msa\")\n\nus_airlines <- read.csv(\"https://raw.githubusercontent.com/sjsimmo2/TimeSeries/master/usairlines.csv\")\n```\n:::\n\n\n# Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.seasonal import STL\n\nus_airlines = r.us_airlines\nus_airlines.set_index(pd.date_range(start='1/1/1990', end='3/1/2008', freq='MS'), inplace=True)\n```\n:::\n\n\n:::\n\n# Time Series Data\n\nTime series is an ordered sequence of observations, typically through **equally spaced** time intervals. If you have a missing interval, you need to impute that period (e.g. Jan, Feb, April; we need to impute March).\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# | echo: false\n# | fig-cap: Time Series Use Cases\n\nfrom IPython.display import Markdown\nfrom tabulate import tabulate\n\ntable = [\n    [\"Agriculture\", \"Crop Production\"],\n    [\"Economics\", \"Stock Prices\"],\n    [\"Engineering\", \"Electric Signals\"],\n    [\"Meteorology\", \"Wind Speeds\"],\n    [\"Social Sciences\", \"Crime Rates\"],\n]\n\nMarkdown(tabulate(table, headers=[\"Field\", \"Use Case\"]))\n```\n\n::: {.cell-output-display}\nField            Use Case\n---------------  ----------------\nAgriculture      Crop Production\nEconomics        Stock Prices\nEngineering      Electric Signals\nMeteorology      Wind Speeds\nSocial Sciences  Crime Rates\n:::\n:::\n\n\nWe focus on univariate time series data for now.\n\nSoftware assumes that your data is in chronological order and that the intervals are evenly spaced.\n\nBefore doing any analysis, always make sure to plot your data!\n\n:::{.panel-tabset group=\"language\"}\n# R\n\n\n::: {.cell}\n\n```{.r .cell-code}\npassenger <- ts(us_airlines$Passengers, start = 1990, frequency = 12)\n\nautoplot(passenger) +\n    labs(title = \"Time Series Plot for Passengers\", x = \"Date\", y = \"Passengers\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n# Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nplt.plot(us_airlines[\"Passengers\"])\nplt.xlabel(\"Date\")\nplt.ylabel(\"Passengers\")\nplt.title(\"Time Series Plot for Passengers\")\nplt.grid()\nplt.show()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n:::\n\n:::{layout-ncol=2}\n![Google Stock 2018 - 2023](images/google-stock.png){#fig-google}\n\n![Trend and Seasonality in Time Series](images/trend-and-seasonality.png){#fig-trend-seasonal}\n:::\n\nTime series can have a trend--overall pattern to the data (linear, quadratic, positive, negative, etc.). Notice the cyclic pattern in @fig-trend-seasonal.\n\n# Signal and Noise\n\nTime series is a combination of both **signal** and **noise**. Signal is the explained variation--trend, cycle, seasonality. Noise is our error or the unexplained variation.\n\nWe are typically interested in forecasting future values with our time series. We need a model in order to forecast values.\n\n![The Forecasting Process](images/forecasting-cycle.png){#fig-forecasting-cycle}\n\n# Decomposition\n\nDecomposition allows us to separate our time series data into **trend, seasonal variation, and error**. In most software, in order to decompose we need to have both trend / cycle patterns AND seasonal variation.\n\n\n::: {.cell}\n::: {.cell-output-display}\nType            Equation\n--------------  ---------------------------------\nAdditive        $T_t + S_t + R_t$\nMultiplicative  $Y_t = T_t \\times S_t \\times R_t$\n:::\n:::\n\n\n![Additive vs. Multiplicative](images/decomposition-types.png){#fig-add-mul}\n\n$T_t$ is the trend, $S_t$ is the season, $R_t$ is the error. If our time series is multiplicative, then we typically log the series:\n\n$$\n\\log(Y_t) = \\log(T_t) + \\log(S_t) + \\log(R_t)\n$$\n\nNow the series is additive.\n\n## Seasonally Adjusted Data\n\nAn advantage of time series decomposition is that we can create seasonally adjusted data (i.e. remove the \"effect of seasonality\").\n\n$$\nY_t - S_t = T_t + R_t\n$$\n\n$$\n\\frac{Y_t}{S_t} = T_t \\times R_t\n$$\n\nSeasonal length of the time series is the length of one season--how long until the series repeats the \"pattern.\"\n\n# Seasonal and STL Decomposition\n\n::: {.panel-tabset group=\"language\"}\n# R\n\nWe can plot the the STL decomposition using the `stl` function along with a seasonal window argument:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndecomp_stl <- stl(passenger, s.window = 7)\nplot(decomp_stl)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-3.png){width=672}\n:::\n:::\n\n\nThe bars on the right of each component represent how much variability is being explained by the component. In R, the smaller the bar the more variability is being explained.\n\n# Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nresult = seasonal_decompose(us_airlines[\"Passengers\"], model=\"additive\", period=12)\nresult.plot()\nplt.show()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n\n```{.python .cell-code}\nresult = seasonal_decompose(\n    us_airlines[\"Passengers\"], model=\"multiplicative\", period=12\n)\nresult.plot()\nplt.show()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-2.png){width=672}\n:::\n:::\n\n\n## STL Decomposition\n\nSeasonal and Trend Decomposition using Loess. Smoothness of the trend is decided by the length of the `seasonal` window that the moving average uses.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nstl = STL(us_airlines['Passengers'], period=12)\nres = stl.fit()\nfig = res.plot()\nplt.show()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-5.png){width=672}\n:::\n:::\n\n\nTo pull out the different decomposition components we can concatenate the different decomposition objects returned by the fit:\n\n\n::: {.cell}\n\n```{.python .cell-code}\npd.concat([res.seasonal, res.trend, res.resid], axis=1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 season         trend        resid\n1990-01-01 -4209.074208  38999.134669  -442.060461\n1990-02-01 -5433.547341  38869.036724   100.510617\n1990-03-01   559.028725  38740.856067  1278.115209\n1990-04-01  -602.850726  38614.992784   254.857942\n1990-05-01   -71.241100  38491.161768  -170.920668\n...                 ...           ...          ...\n2007-11-01 -2674.853169  64848.872472  -207.019303\n2007-12-01 -3718.499734  64990.641956  -365.142222\n2008-01-01 -6755.005707  65129.993257  -574.987550\n2008-02-01 -8822.280962  65266.832075   664.448887\n2008-03-01  3061.324052  65401.303910  -644.627961\n\n[219 rows x 3 columns]\n```\n:::\n:::\n\n\nWe can also overlay the trend (blue) and seasonally adjusted data (orange) on our time series data:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nplt.plot(us_airlines['Passengers'])\nplt.plot(res.trend, color='blue')\n\nseas_adj = us_airlines['Passengers'] - res.seasonal\n\nplt.plot(seas_adj, color='orange')\nplt.xlabel('Time')\nplt.ylabel('Passengers')\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-7.png){width=672}\n:::\n:::\n\n:::\n\n# Decomposition Techniques\n\nThree common techniques for decomposition:\n\n-   **Classical Decomposition**\n    -   Trend uses moving / rolling average smoothing\n    -   Seasonal uses average de-trended values across seasons\n-   **X-13 ARIMA Decomposition**\n    -   Trends uses moving / rolling average smoothing\n    -   Seasonal uses moving / rolling average smoothing\n    -   Iteratively repeats above methods and ARIMA modeling\n    -   Can handle outliers\n-   **STL (Seasonal and Trend Using LOESS Estimation)**\n    -   Uses local regression techniques to estimate trend and seasonality\n    -   Allows changing effects for trend and season\n    -   Adapted to handle outliers\n\n## Cautions\n\nDecomposition will not tell you if have seasonal data nor length of seasonality.\n\n# Measures for Strength of Trend / Seasonality\n\nMeasures given by Hyndmana nd Athanasopoulos.\n\n$$\nF_T = \\max(0, 1 - \\frac{\\text{Var}(R_t)}{\\text{Var}(T_t + R_t)}) + 2 \\cdot \\text{Cov}(R_t, T_t)\n$$\n\n$$\nF_S = \\max(0, 1 - \\frac{\\text{Var}(R_t)}{\\text{Var}(S_t + R_t)}) + 2 \\cdot \\text{Cov}(R_t, S_t)\n$$\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}