{
  "hash": "1c664779fd2d5a5642ec2fcc63d42672",
  "result": {
    "markdown": "---\ntitle: Introduction to Forecasting & Time Series Structure\ndate: 08/24/2023\n---\n\n# Time Series Data\n\nTime series is an ordered sequence of observations, typically through **equally spaced** time intervals. If you have a missing interval, you need to impute that period (e.g. Jan, Feb, April; we need to impute March).\n\n::: {.cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\nField            Use Case\n---------------  ----------------\nAgriculture      Crop Production\nEconomics        Stock Prices\nEngineering      Electric Signals\nMeteorology      Wind Speeds\nSocial Sciences  Crime Rates\n\nTime Series Use Cases\n:::\n:::\n\n\nWe focus on univariate time series data for now.\n\n![Google Stock 2018 - 2023](images/google-stock.png)\n\n# Signal and Noise\n\nTime series is a combination of both **signal** and **noise**. Signal is the explained variation--trend, cycle, seasonality. Noise is our error or the unexplained variation.\n\n# Decomposition\n\nWe may want to decompose time series data into a series of components. In most software, in order to decompose we need to have both trend / cycle patterns AND seasonal variation.\n\nThree separate parts:\n\n-   Trend/Cycle patterns\n-   Seasonal variation\n-   Error\n\n::: {.cell execution_count=2}\n\n::: {.cell-output .cell-output-display execution_count=2}\nType            Equation\n--------------  ---------------------------------\nAdditive        $T_t + S_t + R_t$\nMultiplicative  $Y_t = T_t \\times S_t \\times R_t$\n:::\n:::\n\n\n![Additive vs. Multiplicative](images/decomposition-types.png)\n\n## Seasonally Adjusted Data\n\nAn advantage of time series decompositive is that we can create seasonally adjusted data (i.e. remove the \"effect of seasonality\").\n\n$$\nY_t - S_t = T_t + R_t\n$$\n\n$$\n\\frac{Y_t}{S_t} = T_t \\times R_t\n$$\n\nSeasonal length of the time series is the length of one season--how long until the series repeats the \"pattern.\"\n\n# Seasonal and STL Decomposition\n\n::: {.panel-tabset}\n# R\n\n\n# Python\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.seasonal import STL\nusair = pd.read_csv(\"https://raw.githubusercontent.com/sjsimmo2/TimeSeries/master/usairlines.csv\")\n\ndf = pd.date_range(start='1/1/1990', end='3/1/2008', freq='MS')\nusair.index = pd.to_datetime(df)\nusair.head()\n\nplt.plot(usair['Passengers'])\nplt.xlabel('Date')\nplt.ylabel('Passengers')\nplt.title('Airline Passengers')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-1.png){width=610 height=449}\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nresult = seasonal_decompose(usair['Passengers'], model='additive', period=12)\nresult.plot()\nplt.show()\n\nresult = seasonal_decompose(usair['Passengers'], model='multiplicative', period=12)\nresult.plot()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=661 height=469}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-2.png){width=661 height=469}\n:::\n:::\n\n\n## STL Decomposition\n\nSeasonal and Trend Decomposition using Loess. Smoothness of the trend is decided by the length of the `seasonal` window that the moving average uses.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nstl = STL(usair['Passengers'], period=12)\nres = stl.fit()\nfig = res.plot()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-1.png){width=661 height=469}\n:::\n:::\n\n\nTo pull out the different decomposition components we can concatenate the different decomposition objects returned by the fit:\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\npd.concat([res.seasonal, res.trend, res.resid], axis=1)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>trend</th>\n      <th>resid</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1990-01-01</th>\n      <td>-4209.074208</td>\n      <td>38999.134669</td>\n      <td>-442.060461</td>\n    </tr>\n    <tr>\n      <th>1990-02-01</th>\n      <td>-5433.547341</td>\n      <td>38869.036724</td>\n      <td>100.510617</td>\n    </tr>\n    <tr>\n      <th>1990-03-01</th>\n      <td>559.028725</td>\n      <td>38740.856067</td>\n      <td>1278.115209</td>\n    </tr>\n    <tr>\n      <th>1990-04-01</th>\n      <td>-602.850726</td>\n      <td>38614.992784</td>\n      <td>254.857942</td>\n    </tr>\n    <tr>\n      <th>1990-05-01</th>\n      <td>-71.241100</td>\n      <td>38491.161768</td>\n      <td>-170.920668</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2007-11-01</th>\n      <td>-2674.853169</td>\n      <td>64848.872472</td>\n      <td>-207.019303</td>\n    </tr>\n    <tr>\n      <th>2007-12-01</th>\n      <td>-3718.499734</td>\n      <td>64990.641956</td>\n      <td>-365.142222</td>\n    </tr>\n    <tr>\n      <th>2008-01-01</th>\n      <td>-6755.005707</td>\n      <td>65129.993257</td>\n      <td>-574.987550</td>\n    </tr>\n    <tr>\n      <th>2008-02-01</th>\n      <td>-8822.280962</td>\n      <td>65266.832075</td>\n      <td>664.448887</td>\n    </tr>\n    <tr>\n      <th>2008-03-01</th>\n      <td>3061.324052</td>\n      <td>65401.303910</td>\n      <td>-644.627961</td>\n    </tr>\n  </tbody>\n</table>\n<p>219 rows Ã— 3 columns</p>\n</div>\n```\n:::\n:::\n\n\nWe can also overlay the trend (blue) and seasonally adjusted data (orange) on our time series data:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nplt.plot(usair['Passengers'])\nplt.plot(res.trend, color='blue')\n\nseas_adj = usair['Passengers'] - res.seasonal\n\nplt.plot(seas_adj, color='orange')\nplt.xlabel('Time')\nplt.ylabel('Passengers')\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nText(0, 0.5, 'Passengers')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-8-output-2.png){width=610 height=429}\n:::\n:::\n\n\n:::\n\n# Decomposition Techniques\n\nThree common techniques for decomposition:\n\n-   Classical Decomposition\n    -   Trend uses moving / rolling average smoothing\n    -   Seasonal uses average de-trended values across seasons\n-   X-13 ARIMA Decomposition\n    -   Trends uses moving / rolling average smoothing\n    -   Seasonal uses moving / rolling average smoothing\n    -   Iteratively repeats above methods and ARIMA modeling\n    -   Can handle outliers\n-   STL (Seasonal and Trend Using LOESS Estimation)\n    -   Uses local regression techniques to estimate trend and seasonality\n    -   Allows changing effects for trend and season\n    -   Adapted to handle outliers\n\n## Cautions\n\nDecomposition will not tell you if have seasonal data nor length of seasonality.\n\n# Measures for Strength of Trend / Seasonality\n\nMeasures given by Hyndmana nd Athanasopoulos.\n\n$$\nF_T = \\max(0, 1 - \\frac{\\text{Var}(R_t)}{\\text{Var}(T_t + R_t)}) + 2 \\cdot \\text{Cov}(R_t, T_t)\n$$\n\n$$\nF_S = \\max(0, 1 - \\frac{\\text{Var}(R_t)}{\\text{Var}(S_t + R_t)}) + 2 \\cdot \\text{Cov}(R_t, S_t)\n$$\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}