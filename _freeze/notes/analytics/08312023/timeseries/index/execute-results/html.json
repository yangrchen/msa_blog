{
  "hash": "f7285752ad5d90cddbc06eeb9116fc14",
  "result": {
    "markdown": "---\ntitle: Linear Trend for Exponential Smoothing\ndate: 08/31/2023\n---\n\n# Linear Trend for Exponential Smoothing\n\nSingle Exponential Smoothing can't adequately handle data that is trending up or down.\n\nMultiple ways to incorporate a trend in the ESM:\n\n-   Linear / Holt Exponential Smoothing\n-   Damped Trend Exponential Smoothing\n\n$$\n\\begin{align*}\n\\hat{Y}_{t + h} &= L_t + hT_t \\\\\nL_t &= \\theta Y_t + (1 - \\theta)(L_{t - 1} + T_{t - 1}) \\\\\nT_t &= \\gamma(L_t - L_{t - 1}) + (1 - \\gamma)T_{t - 1}\n\\end{align*}\n$$\n\nAdding a component means we add a new smoothing parameter, $\\gamma$. This second component incorporates trending into the model. $h$ is the amount of time we are forecasting ahead.\n\n## Damped Trend Exponential Smoothing\n\nWe have a new dampening parameter incorporated into our model, $\\phi$.\n\n$$\n\\hat{Y}_{t+h} = L_t + \\sum_{i=1}^{h} \\phi^i T_t\n$$\n\n-   $0 < \\phi < 1$\n\n::: {.panel-tabset}\n# Python\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.api import Holt\n\nsteel = pd.read_csv(\n    \"https://raw.githubusercontent.com/sjsimmo2/TimeSeries/master/steel.csv\"\n)\ndf = pd.date_range(\"1/1/1984\", \"12/1/1991\", freq=\"MS\")\nsteel.set_index(pd.to_datetime(df), inplace=True)\n\nfit = Holt(steel[\"steelshp\"]).fit()\nfit.summary()\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<table class=\"simpletable\">\n<caption>Holt Model Results</caption>\n<tr>\n  <th>Dep. Variable:</th>    <td>steelshp</td> <th>  No. Observations:  </th>        <td>96</td>       \n</tr>\n<tr>\n  <th>Model:</th>              <td>Holt</td>   <th>  SSE                </th>   <td>22317588.149</td>  \n</tr>\n<tr>\n  <th>Optimized:</th>          <td>True</td>   <th>  AIC                </th>     <td>1194.228</td>    \n</tr>\n<tr>\n  <th>Trend:</th>            <td>Additive</td> <th>  BIC                </th>     <td>1204.485</td>    \n</tr>\n<tr>\n  <th>Seasonal:</th>           <td>None</td>   <th>  AICC               </th>     <td>1195.171</td>    \n</tr>\n<tr>\n  <th>Seasonal Periods:</th>   <td>None</td>   <th>  Date:              </th> <td>Tue, 05 Sep 2023</td>\n</tr>\n<tr>\n  <th>Box-Cox:</th>            <td>False</td>  <th>  Time:              </th>     <td>14:14:56</td>    \n</tr>\n<tr>\n  <th>Box-Cox Coeff.:</th>     <td>None</td>   <th>                     </th>         <td> </td>       \n</tr>\n</table>\n<table class=\"simpletable\">\n<tr>\n         <td></td>                 <th>coeff</th>                <th>code</th>               <th>optimized</th>     \n</tr>\n<tr>\n  <th>smoothing_level</th> <td>           0.5454469</td> <td>               alpha</td> <td>                True</td>\n</tr>\n<tr>\n  <th>smoothing_trend</th> <td>           0.0545996</td> <td>                beta</td> <td>                True</td>\n</tr>\n<tr>\n  <th>initial_level</th>   <td>           5980.0000</td> <td>                 l.0</td> <td>               False</td>\n</tr>\n<tr>\n  <th>initial_trend</th>   <td>           170.00000</td> <td>                 b.0</td> <td>               False</td>\n</tr>\n</table>\n```\n:::\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nfit.forecast(24)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n1992-01-01    6394.260299\n1992-02-01    6375.055005\n1992-03-01    6355.849712\n1992-04-01    6336.644418\n1992-05-01    6317.439124\n1992-06-01    6298.233830\n1992-07-01    6279.028536\n1992-08-01    6259.823242\n1992-09-01    6240.617948\n1992-10-01    6221.412654\n1992-11-01    6202.207360\n1992-12-01    6183.002066\n1993-01-01    6163.796772\n1993-02-01    6144.591478\n1993-03-01    6125.386184\n1993-04-01    6106.180890\n1993-05-01    6086.975596\n1993-06-01    6067.770302\n1993-07-01    6048.565008\n1993-08-01    6029.359714\n1993-09-01    6010.154420\n1993-10-01    5990.949127\n1993-11-01    5971.743833\n1993-12-01    5952.538539\nFreq: MS, dtype: float64\n```\n:::\n:::\n\n\nWe can run a damped trend using the `damped_trend` parameter:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nfit = Holt(steel[\"steelshp\"], damped_trend=True).fit()\nfit.summary()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<table class=\"simpletable\">\n<caption>Holt Model Results</caption>\n<tr>\n  <th>Dep. Variable:</th>    <td>steelshp</td> <th>  No. Observations:  </th>        <td>96</td>       \n</tr>\n<tr>\n  <th>Model:</th>              <td>Holt</td>   <th>  SSE                </th>   <td>22092850.854</td>  \n</tr>\n<tr>\n  <th>Optimized:</th>          <td>True</td>   <th>  AIC                </th>     <td>1195.256</td>    \n</tr>\n<tr>\n  <th>Trend:</th>            <td>Additive</td> <th>  BIC                </th>     <td>1208.078</td>    \n</tr>\n<tr>\n  <th>Seasonal:</th>           <td>None</td>   <th>  AICC               </th>     <td>1196.529</td>    \n</tr>\n<tr>\n  <th>Seasonal Periods:</th>   <td>None</td>   <th>  Date:              </th> <td>Tue, 05 Sep 2023</td>\n</tr>\n<tr>\n  <th>Box-Cox:</th>            <td>False</td>  <th>  Time:              </th>     <td>14:14:56</td>    \n</tr>\n<tr>\n  <th>Box-Cox Coeff.:</th>     <td>None</td>   <th>                     </th>         <td> </td>       \n</tr>\n</table>\n<table class=\"simpletable\">\n<tr>\n         <td></td>                 <th>coeff</th>                <th>code</th>               <th>optimized</th>     \n</tr>\n<tr>\n  <th>smoothing_level</th> <td>           0.5235714</td> <td>               alpha</td> <td>                True</td>\n</tr>\n<tr>\n  <th>smoothing_trend</th> <td>           0.0506682</td> <td>                beta</td> <td>                True</td>\n</tr>\n<tr>\n  <th>initial_level</th>   <td>           5980.0000</td> <td>                 l.0</td> <td>               False</td>\n</tr>\n<tr>\n  <th>initial_trend</th>   <td>           168.30000</td> <td>                 b.0</td> <td>               False</td>\n</tr>\n<tr>\n  <th>damping_trend</th>   <td>           0.9900000</td> <td>                 phi</td> <td>                True</td>\n</tr>\n</table>\n```\n:::\n:::\n\n\n:::\n\n# Seasonal Exponential Smoothing\n\nESMs can also be adapted to account for seasonal factors. Seasonal models can be additive or multiplicative in the seasonal effect.\n\n-   Holt Winters Additive Exponential Smoothing\n-   Holt Winters Multiplicative Exponential Smoothing\n\n## Additive Model\n\n$$\n\\begin{align*}\n\\hat{Y}_{t+h} &= L_t + hT_t + S_{t-p+h} \\\\\nL_t &= \\theta(Y_t - S_{t-p}) + (1 - \\theta)(L_{t-1} + T_{t-1}) \\\\\nT_t &= \\gamma(L_t - L_{t-1}) + (1 - \\gamma)T_{t-1} \\\\\nS_t = \\delta(Y_t - L_{t-1} - T_{t-1}) + (1 - \\delta)(S_{t-p})\n\\end{align*}\n$$\n\n-   $p$ is the length of the season\n\n## Multiplicative Model\n\n$$\n\\hat{Y}_{t+h} = (L_t + hT_t)S_{t-p+h}\n$$\n\n::: {.panel-tabset}\n# Python\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nfrom statsmodels.tsa.api import ExponentialSmoothing\n\nusair_p = pd.read_csv(\"https://raw.githubusercontent.com/sjsimmo2/TimeSeries/master/usairlines.csv\")\ndf = pd.date_range(start='1/1/1990', end='3/1/2008', freq='MS')\nusair_p.set_index(pd.to_datetime(df), inplace=True)\n\nusair_p['HWES_ADD'] = ExponentialSmoothing(usair_p['Passengers'], trend='add', seasonal='add', seasonal_periods=12).fit().fittedvalues\n\nhw_add = ExponentialSmoothing(usair_p['Passengers'], trend='add', seasonal='add', seasonal_periods=12).fit()\nhw_add.summary()\n\nhw_mult = ExponentialSmoothing(usair_p['Passengers'], trend='add', seasonal='mul', seasonal_periods=12).fit()\nhw_mult.summary()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/opt/homebrew/Caskroom/miniconda/base/envs/msa/lib/python3.11/site-packages/statsmodels/tsa/holtwinters/model.py:917: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n  warnings.warn(\n/opt/homebrew/Caskroom/miniconda/base/envs/msa/lib/python3.11/site-packages/statsmodels/tsa/holtwinters/model.py:917: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n  warnings.warn(\n/opt/homebrew/Caskroom/miniconda/base/envs/msa/lib/python3.11/site-packages/statsmodels/tsa/holtwinters/model.py:917: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n  warnings.warn(\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<table class=\"simpletable\">\n<caption>ExponentialSmoothing Model Results</caption>\n<tr>\n  <th>Dep. Variable:</th>         <td>Passengers</td>      <th>  No. Observations:  </th>        <td>219</td>      \n</tr>\n<tr>\n  <th>Model:</th>            <td>ExponentialSmoothing</td> <th>  SSE                </th>   <td>810065387.907</td> \n</tr>\n<tr>\n  <th>Optimized:</th>                <td>True</td>         <th>  AIC                </th>     <td>3344.058</td>    \n</tr>\n<tr>\n  <th>Trend:</th>                  <td>Additive</td>       <th>  BIC                </th>     <td>3398.283</td>    \n</tr>\n<tr>\n  <th>Seasonal:</th>            <td>Multiplicative</td>    <th>  AICC               </th>     <td>3347.478</td>    \n</tr>\n<tr>\n  <th>Seasonal Periods:</th>          <td>12</td>          <th>  Date:              </th> <td>Tue, 05 Sep 2023</td>\n</tr>\n<tr>\n  <th>Box-Cox:</th>                  <td>False</td>        <th>  Time:              </th>     <td>14:14:57</td>    \n</tr>\n<tr>\n  <th>Box-Cox Coeff.:</th>           <td>None</td>         <th>                     </th>         <td> </td>       \n</tr>\n</table>\n<table class=\"simpletable\">\n<tr>\n           <td></td>                  <th>coeff</th>                <th>code</th>               <th>optimized</th>     \n</tr>\n<tr>\n  <th>smoothing_level</th>    <td>           0.3939286</td> <td>               alpha</td> <td>                True</td>\n</tr>\n<tr>\n  <th>smoothing_trend</th>    <td>           0.0218849</td> <td>                beta</td> <td>                True</td>\n</tr>\n<tr>\n  <th>smoothing_seasonal</th> <td>           0.3030357</td> <td>               gamma</td> <td>                True</td>\n</tr>\n<tr>\n  <th>initial_level</th>      <td>           38232.794</td> <td>                 l.0</td> <td>                True</td>\n</tr>\n<tr>\n  <th>initial_trend</th>      <td>          -95.864899</td> <td>                 b.0</td> <td>                True</td>\n</tr>\n<tr>\n  <th>initial_seasons.0</th>  <td>           0.8828055</td> <td>                 s.0</td> <td>                True</td>\n</tr>\n<tr>\n  <th>initial_seasons.1</th>  <td>           0.8473624</td> <td>                 s.1</td> <td>                True</td>\n</tr>\n<tr>\n  <th>initial_seasons.2</th>  <td>           1.0108916</td> <td>                 s.2</td> <td>                True</td>\n</tr>\n<tr>\n  <th>initial_seasons.3</th>  <td>           0.9777503</td> <td>                 s.3</td> <td>                True</td>\n</tr>\n<tr>\n  <th>initial_seasons.4</th>  <td>           1.0088677</td> <td>                 s.4</td> <td>                True</td>\n</tr>\n<tr>\n  <th>initial_seasons.5</th>  <td>           1.0761260</td> <td>                 s.5</td> <td>                True</td>\n</tr>\n<tr>\n  <th>initial_seasons.6</th>  <td>           1.1385855</td> <td>                 s.6</td> <td>                True</td>\n</tr>\n<tr>\n  <th>initial_seasons.7</th>  <td>           1.1824059</td> <td>                 s.7</td> <td>                True</td>\n</tr>\n<tr>\n  <th>initial_seasons.8</th>  <td>           0.9607449</td> <td>                 s.8</td> <td>                True</td>\n</tr>\n<tr>\n  <th>initial_seasons.9</th>  <td>           1.0081718</td> <td>                 s.9</td> <td>                True</td>\n</tr>\n<tr>\n  <th>initial_seasons.10</th> <td>           0.9385590</td> <td>                s.10</td> <td>                True</td>\n</tr>\n<tr>\n  <th>initial_seasons.11</th> <td>           0.9677292</td> <td>                s.11</td> <td>                True</td>\n</tr>\n</table>\n```\n:::\n:::\n\n\n:::\n\n# Evaluating Forecasts\n\nAccuracy of forecasts depends on your definition of accuracy (different across different industries).\n\nGood forecasts should have these characteristics:\n\n-   Be highly correlated with actual series values\n-   Exhibit small forecast errors\n-   Capture the important features of the original time series\n\n## Judment Forecasting\n\nForecasts are found using quantitative or modeling approaches. However, there are instances where models are not availabe and qualitative or judgment forecast is used. Occasionally, we merge the two together.\n\n## Accuracy vs. Goodness-of-Fit\n\nGoodness-of-fit is calculated on the same sample used to build the model.\n\nA diagnostic statistic calculated using a hold out sample taht was not used in model building is an **accuracy** statistic.\n\n# Hold Out Sample\n\nHold out sample in time sereies should always come from the end of the time series and doesn't typically go beyond **25% of the data**.\n\nIf you have a seasonal time series you should ideally have an entire season captured in the hold-out sample.\n\n1.  Divide time series into two or three segments--training, validation, and/or test\n2.  Derive a set of candidate models\n3.  Calculate the chosen accuracy statistic by forecasting the validation data set\n4.  Pick the model with the best accuracy statistic\n5.  Provide the accuracy of the model on the *test* data set\n\n# Model Diagnostic Statistics\n\n## Mean Absolute Percent Error\n\n$$\n\\text{MAPE} = \\frac{1}{n}\\sum_{t=1}^n \\left| \\frac{Y_t - \\hat{Y}_t}{Y_t} \\right|\n$$\n\n-   Can overweight over-predictions\n-   Can't divide by 0\n\n## Mean Absolute Error\n\n$$\n\\text{MAE} = \\frac{1}{n}\\sum_{t=1}^n \\left| Y_t - \\hat{Y}_t \\right|\n$$\n\n-   Not scale invariant\n\n## Square Root of Mean Square Error\n\n$$\n\\text{RMSE} = \\sqrt{\\frac{1}{n}\\sum_{t=1}^n (Y_t - \\hat{Y}_t)^2}\n$$\n\n-   Overweight of larger errors\n-   Not scale invariant\n\n## Symmetric Mean Absolute Percent Error\n\n$$\n\\text{sMAPE} = \\frac{1}{n}\\sum_{t=1}^n \\frac{\\left| Y_t - \\hat{Y}_t \\right|}{(\\left| Y_t \\right| + \\left| \\hat{Y}_t \\right|)}\n$$\n\n-   Divide by 0\n-   Still asymmetric\n\n## Comparison Across Diagnostics\n\n![Comparison Across Diagnostics](images/diagnostic-comparisons.png)\n\n# Error, Trend, Season (ETS)\n\nETS is an automated search procedure that will try to identify the best ESM based on treating the data as a state space problem.\n\n-   Error has choices of Additive or Multiplicative\n-   Trend has choices of None, Additive, or Multiplicative (can also have a damped trend)\n-   Seasonal has choices of None, Additive, or Multiplicative\n\nYou can choose which one you want or let the computer choose.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}