{
  "hash": "d63453e2f59557c6c864fe8c6557d99a",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Markov Chain Monte Carlo\ndate: 03/19/2024\n---\n\n# Markov Chain Monte Carlo (MCMC)\n\nA **trace plot** shows the value at each index of a simulated distribution.\n\n![Trace Plot](images/trace-plot.png){#fig-trace-plot}\n\nIn @fig-trace-plot, the trace plot is what we consider to be a stationary distribution. To generate trace plots, we use Markov Chain Monte Carlo (MCMC) methods. Initially, we start with a random value and are trying to simulate the posterior distribution. For each value in the MCMC only depends on the previous value and we are looking for the chain to converge to a stationary distribution.\n\nIn a trace plot, the chain starts with a burn-in period to try to find the posterior distribution once it converges. If the chain does not converge, we will see a trace plot that looks like @fig-nonconvergence.\n\n![Nonconvergence](images/nonconvergence.png){#fig-nonconvergence}\n\n## Fixes\n\n-   **Improper posterior or bad prior**: New prior distribution\n-   **Hasn't converged**: Let the chain run longer\n-   **Chain continues to increase**: Potentially a bad starting point so provide a new starting point or change prior\n-   **Too much autocorrelation in chain**: Thin the chain\n\n::: {#12b0df2d .cell execution_count=1}\n``` {.python .cell-code}\nimport pymc as pm\nimport numpy as np\n\nwith pm.Model() as binomial_model:\n    p = pm.Beta(\"p\", alpha=1, beta=1)\n    y_obs = pm.Binomial(\"y_obs\", n=100, p=p, observed=40)\n    trace = pm.sample(\n        draws=6000,\n        tune=3000,\n        chains=4,\n        init=\"adapt_diag\",\n        random_seed=98763,\n        return_inferencedata=True,\n    )\n\npm.plot_trace(trace, var_names=[\"p\"], compact=False, legend=True);\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nAuto-assigning NUTS sampler...\nInitializing NUTS using adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [p]\nSampling 4 chains for 3_000 tune and 6_000 draw iterations (12_000 + 24_000 draws total) took 1 seconds.\n/opt/homebrew/Caskroom/miniforge/base/envs/msa/lib/python3.11/site-packages/arviz/plots/backends/matplotlib/traceplot.py:433: FutureWarning: The return type of `Dataset.dims` will be changed to return a set of dimension names in future, in order to be more consistent with `DataArray.dims`. To access a mapping from dimension names to lengths, please use `Dataset.sizes`.\n  for chain_id in range(data.dims[\"chain\"])\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n<style>\n    /* Turns off some styling */\n    progress {\n        /* gets rid of default border in Firefox and Opera. */\n        border: none;\n        /* Needs to be in here for Safari polyfill so background images work as expected. */\n        background-size: auto;\n    }\n    progress:not([value]), progress:not([value])::-webkit-progress-bar {\n        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);\n    }\n    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n        background: #F44336;\n    }\n</style>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n    <div>\n      <progress value='36000' class='' max='36000' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      100.00% [36000/36000 00:01&lt;00:00 Sampling 4 chains, 0 divergences]\n    </div>\n    \n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-2-output-4.png){width=912 height=209}\n:::\n:::\n\n\n# Estimate Value at Risk\n\nWe are interested in estimating VaR for Apple stock (AAPL) in rate of change (ROC) for one day. Let's assume rate of change $(R_t)$ follows a Normal distribution with mean $\\mu$ and standard deviation $\\sigma$. \n\nWe need to assign a distribution to $\\mu$ and $\\sigma^2$:\n\n-   Assume $\\mu$ is distributed as Normal(0, 100)\n-   Assume $\\sigma^2$ is distributed as Inv-Gamma(0.001, 0.001)\n-   Once we get a posterior for $\\mu$ and $\\sigma^2$, we can use this to get the first quantile\n\n::: {#9c18a71b .cell execution_count=2}\n``` {.python .cell-code}\nimport pandas as pd\nimport pandas_datareader.data as web\nimport scipy.stats as stats\n\nticker = \"AAPL\"\n\nstart_date = \"2022-01-01\"\nend_date = \"2024-3-7\"\n\ndata = web.DataReader(ticker, \"stooq\", start_date, end_date)\n\ndata[\"AAPL_r\"] = data[\"Close\"].pct_change()\n\nstocks = data[[\"Close\", \"AAPL_r\"]].tail(500)\n\nn = len(stocks)\ny = stocks[\"AAPL_r\"].values\n\nwith pm.Model() as model:\n    mu = pm.Normal(\"mu\", mu=0, sigma=100)\n    sigma2 = pm.InverseGamma(\"sigma2\", alpha=0.001, beta=0.001)\n\n    y_like = pm.Normal(\"y_like\", mu=mu, sigma=pm.math.sqrt(sigma2), observed=y)\n\n    trace = pm.sample(draws=1000, tune=500, chains=4)\n\npm.plot_trace(trace);\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [mu, sigma2]\nSampling 4 chains for 500 tune and 1_000 draw iterations (2_000 + 4_000 draws total) took 1 seconds.\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n<style>\n    /* Turns off some styling */\n    progress {\n        /* gets rid of default border in Firefox and Opera. */\n        border: none;\n        /* Needs to be in here for Safari polyfill so background images work as expected. */\n        background-size: auto;\n    }\n    progress:not([value]), progress:not([value])::-webkit-progress-bar {\n        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);\n    }\n    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n        background: #F44336;\n    }\n</style>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n    <div>\n      <progress value='6000' class='' max='6000' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      100.00% [6000/6000 00:00&lt;00:00 Sampling 4 chains, 0 divergences]\n    </div>\n    \n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-3-output-4.png){width=912 height=357}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}