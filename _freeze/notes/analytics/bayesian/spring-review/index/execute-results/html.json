{
  "hash": "e18f5a24f41baa9c77c62d8e3fdcb2df",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Bayesian Statistics Review\ndate: 03/11/2024\n---\n\n$$\nP(p|Y) = \\frac{P(Y|p) P(p)}{P(Y)}\n$$\n\n-   $P(p|Y)$ is the posterior distribution\n-   $P(Y|p)$ is the sampling distribution\n-   $P(p)$ is the prior distribution\n-   $P(Y)$ is the marginal distribution of $Y$\n\nThe goal is to determine a posterior distribution using the prior distribution along with the collected data.\n\nWe focus on characteristics of the data to decide distributions:\n\n-   What is the support? What values can this data take on?\n-   Is it dicrete or continuous?\n\n# Common Distributions\n\n-   **Binomial**: Counting number of successes\n-   **Poisson, Negative Binomial**: Count data (number of customers in a day)\n-   **Gamma, Inv-Gamma**: Only positive, continuous data\n-   **Normal**: Continuous data\n\n## Common Priors\n\n-   **Binomial**: Only have $p$ (proportion), Beta distribution\n-   **Poisson**: Only have $\\lambda$ (mean) which is positive, Gamma distribution\n-   **Gamma**: Have both $\\alpha$ and $\\beta$ which are positive, use Gamma for both\n-   **Normal**: $\\mu$ and $\\sigma$ where $\\mu$ is all real values and $\\sigma$ is only positive, use Normal for $\\mu$ and Inv-Gamma for $\\sigma$\n\n# Steps in Bayesian Statistics\n\n-   Decide what type of data is being collected to decide sampling distribution\n-   Figure out parameters in the sampling distribution\n-   Put information into STAN to simulate distributions of parameters\n-   Make sure you have convergence of chains for posterior distribution\n-   Use posterior distribution to answer questions\n\nWith Bayesian statistics, we now have probability intervals instead of confidence intervals to estimate our parameters of interest.\n\n# Python Example\n\n::: {#e8fe197f .cell execution_count=1}\n``` {.python .cell-code}\nimport pymc as pm\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport logging\n\nlogger = logging.getLogger(\"pymc\")\nlogger.setLevel(logging.WARNING)\n\n# Define data\nN = 100\ny = np.concatenate((np.ones((40,)), np.zeros((60,))))\n\n# Define model\nmodel = pm.Model()\n\nwith model:\n    # Prior distribution\n    p = pm.Beta(\"p\", alpha=1, beta=1)  # Beta(1, 1) prior for p\n\n    likelihood = pm.Bernoulli(\"likelihood\", p=p, observed=y)\n\n    # Sample posterior\n    trace = pm.sample(1000, tune=500, random_seed=12976)\n\nprint(pm.summary(trace))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWARNING (pytensor.tensor.blas): Using NumPy C-API based implementation for BLAS functions.\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n<style>\n    /* Turns off some styling */\n    progress {\n        /* gets rid of default border in Firefox and Opera. */\n        border: none;\n        /* Needs to be in here for Safari polyfill so background images work as expected. */\n        background-size: auto;\n    }\n    progress:not([value]), progress:not([value])::-webkit-progress-bar {\n        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);\n    }\n    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n        background: #F44336;\n    }\n</style>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n    <div>\n      <progress value='6000' class='' max='6000' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      100.00% [6000/6000 00:00&lt;00:00 Sampling 4 chains, 0 divergences]\n    </div>\n    \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n    mean     sd  hdi_3%  hdi_97%  mcse_mean  mcse_sd  ess_bulk  ess_tail  \\\np  0.402  0.048   0.316    0.492      0.001    0.001    1550.0    2632.0   \n\n   r_hat  \np    1.0  \n```\n:::\n:::\n\n\n::: {#ed6efbd0 .cell execution_count=2}\n``` {.python .cell-code}\ny = np.concatenate(\n    (\n        np.ones(\n            6,\n        ),\n        np.zeros(\n            3,\n        ),\n    )\n)\n\nmodel = pm.Model()\n\nwith model:\n    # Prior distribution\n    p = pm.Beta(\"p\", alpha=2, beta=9)\n\n    likelihood = pm.Bernoulli(\"likelihood\", p=p, observed=y)\n\n    # Sample posterior\n    trace = pm.sample(10000, tune=5000, random_seed=12976)\n\nprint(pm.summary(trace))\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n<style>\n    /* Turns off some styling */\n    progress {\n        /* gets rid of default border in Firefox and Opera. */\n        border: none;\n        /* Needs to be in here for Safari polyfill so background images work as expected. */\n        background-size: auto;\n    }\n    progress:not([value]), progress:not([value])::-webkit-progress-bar {\n        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);\n    }\n    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n        background: #F44336;\n    }\n</style>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n    <div>\n      <progress value='60000' class='' max='60000' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      100.00% [60000/60000 00:01&lt;00:00 Sampling 4 chains, 0 divergences]\n    </div>\n    \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n   mean     sd  hdi_3%  hdi_97%  mcse_mean  mcse_sd  ess_bulk  ess_tail  r_hat\np   0.4  0.107     0.2      0.6      0.001    0.001   17743.0   26459.0    1.0\n```\n:::\n:::\n\n\n::: {#ffc71189 .cell execution_count=3}\n``` {.python .cell-code}\nnp.quantile(trace.posterior.p, [0.05, 0.95])\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\narray([0.22903746, 0.58253434])\n```\n:::\n:::\n\n\n::: {#bc077e5b .cell execution_count=4}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n# plt.hist(trace.posterior.p)\nplt.hist(trace.posterior.p.to_numpy().flatten(), bins=100)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n(array([2.000e+00, 0.000e+00, 5.000e+00, 5.000e+00, 4.000e+00, 1.200e+01,\n        1.000e+01, 2.500e+01, 2.700e+01, 4.100e+01, 5.300e+01, 6.500e+01,\n        9.600e+01, 1.060e+02, 1.000e+02, 1.360e+02, 1.970e+02, 2.390e+02,\n        2.260e+02, 2.930e+02, 3.080e+02, 3.760e+02, 4.110e+02, 4.610e+02,\n        4.740e+02, 5.910e+02, 6.330e+02, 6.640e+02, 7.860e+02, 7.890e+02,\n        7.980e+02, 8.550e+02, 8.850e+02, 8.900e+02, 9.640e+02, 1.013e+03,\n        1.025e+03, 1.041e+03, 1.076e+03, 1.047e+03, 1.126e+03, 1.146e+03,\n        1.139e+03, 1.129e+03, 1.143e+03, 1.099e+03, 1.050e+03, 1.028e+03,\n        1.039e+03, 9.890e+02, 9.120e+02, 8.700e+02, 8.840e+02, 7.920e+02,\n        7.350e+02, 7.890e+02, 7.640e+02, 6.120e+02, 6.640e+02, 5.680e+02,\n        4.840e+02, 4.900e+02, 4.360e+02, 4.230e+02, 3.770e+02, 3.240e+02,\n        3.030e+02, 2.570e+02, 2.460e+02, 2.190e+02, 1.710e+02, 1.840e+02,\n        1.350e+02, 1.210e+02, 9.800e+01, 9.100e+01, 6.700e+01, 5.900e+01,\n        4.800e+01, 5.100e+01, 3.700e+01, 4.300e+01, 2.900e+01, 2.100e+01,\n        1.700e+01, 1.200e+01, 1.000e+01, 1.400e+01, 1.100e+01, 3.000e+00,\n        4.000e+00, 3.000e+00, 0.000e+00, 3.000e+00, 0.000e+00, 1.000e+00,\n        0.000e+00, 0.000e+00, 0.000e+00, 1.000e+00]),\n array([0.0655081 , 0.07324322, 0.08097833, 0.08871345, 0.09644857,\n        0.10418369, 0.11191881, 0.11965392, 0.12738904, 0.13512416,\n        0.14285928, 0.1505944 , 0.15832951, 0.16606463, 0.17379975,\n        0.18153487, 0.18926998, 0.1970051 , 0.20474022, 0.21247534,\n        0.22021046, 0.22794557, 0.23568069, 0.24341581, 0.25115093,\n        0.25888605, 0.26662116, 0.27435628, 0.2820914 , 0.28982652,\n        0.29756164, 0.30529675, 0.31303187, 0.32076699, 0.32850211,\n        0.33623723, 0.34397234, 0.35170746, 0.35944258, 0.3671777 ,\n        0.37491282, 0.38264793, 0.39038305, 0.39811817, 0.40585329,\n        0.41358841, 0.42132352, 0.42905864, 0.43679376, 0.44452888,\n        0.452264  , 0.45999911, 0.46773423, 0.47546935, 0.48320447,\n        0.49093958, 0.4986747 , 0.50640982, 0.51414494, 0.52188006,\n        0.52961517, 0.53735029, 0.54508541, 0.55282053, 0.56055565,\n        0.56829076, 0.57602588, 0.583761  , 0.59149612, 0.59923124,\n        0.60696635, 0.61470147, 0.62243659, 0.63017171, 0.63790683,\n        0.64564194, 0.65337706, 0.66111218, 0.6688473 , 0.67658242,\n        0.68431753, 0.69205265, 0.69978777, 0.70752289, 0.71525801,\n        0.72299312, 0.73072824, 0.73846336, 0.74619848, 0.7539336 ,\n        0.76166871, 0.76940383, 0.77713895, 0.78487407, 0.79260918,\n        0.8003443 , 0.80807942, 0.81581454, 0.82354966, 0.83128477,\n        0.83901989]),\n <BarContainer object of 100 artists>)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-2.png){width=583 height=415}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}