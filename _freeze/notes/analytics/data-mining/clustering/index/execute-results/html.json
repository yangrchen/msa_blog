{
  "hash": "6bd07bbc92ade26b1357545d0264175a",
  "result": {
    "markdown": "---\ntitle: Clustering\ndate: 10/06/2023\n---\n\n\n**Clustering** is an unsupervised approach to modeling where the goal is to partition the data into groups.\n\n-   Observations within a cluster are similar in some sense\n-   Observations in difference clusters are different in some sense\n\nThere is no one-size-fits-all solutions, but there are good and bad cluster solutions. No method works best all the time. Keep in mind that clustering uses **ALL** the variables you provide it and clusters should add some business value.\n\n# Examples of Clustering\n\n-   Customer segmentation: Groups of customers with similar shopping or buying patterns\n-   Dimension reduction: Cluster individuals together and use cluster variable as proxy for demographic or behavioral variables\n-   Gather stores with similar characteristics for sales forecasting\n-   Find topics in text data\n-   Find communities in social networks\n\n# Hard vs. Fuzzy\n\n**Hard** clustering is characterized by objects only belonging to one cluster. **Fuzzy** clustering is characterized by objects having the capability to belong to more than one cluster (usually with some probability).\n\nHard:\n\n-   k-means\n-   DBSCAN\n-   Hierarchical\n\nFuzzy:\n\n-   Fuzzy C-means\n-   Gaussian Mixture Models / Expectation-Maximization\n\n# Hierarchical vs. Flat\n\n**Hierarchical** clusters form a tree so you can visually see which clusters are most similar to each other. **Flat** clusters are created according to some apriori process, usually iteratively updating cluster assignments.\n\nHierarchical is expensive when you have a large dataset.\n\n# K-Means\n\nK-Means revolves around using **centroids**. Centroids are \"centers of clusters\" or the means of a group of observations.\n\n![K-Means Clustering](images/k-means.png){#fig-k-means}\n\nWith K-Means we are trying to minimize the sum of squared distances from each point to its cluster centroid.\n\n$$\n\\sum_{C_k}\\sum_{x_i \\in C_k} \\lVert x_i - c_k \\rVert^2\n$$\n\n## Algorithm\n\n1.  Randomly initialize **k** points.\n2.  Assign each data point to the closest seed point.\n3.  The seed point then represents a cluster of data.\n4.  Reset seed points to be the centroids of the cluster by taking the **average** of all data points belonging to the cluster.\n5.  Repeat steps 2-4 updating the cluster centroids until they do not change.\n\nHow can we determine the number of clusters we should use?\n\nWe can use an \"elbow\" plot to find a place where the marginal benefit to objective function for adding a cluster becomes small.\n\n![Elbow Plot](images/elbow-plot.png){#fig-elbow-plot}\n\n## Advantages vs. Disadvantages\n\nAdvantages:\n\n-   Modest time/storage requirements\n-   Shown you can terminate method after small number of iterations with good results\n-   Good for wide variety of data types\n\nDisadvantages\n\n-   Dependent on initialization (different runs can provide different results)\n-   Can be sensitive to outliers as we are based centroids on the average of points\n    -   Consider using k-medoids\n-   Have to input the number of clusters\n-   Difficulty detecting non-spheroidal (globular) clusters\n\n## Preprocessing\n\nYou will need to do data epxloration before trying to cluster the data.\n\n-   Missing Values\n    -   You will need to impute or remove missing values for the variable\n-   Categorical Variables\n    -   Do you need to bin categorical variables?\n    -   You need to one-hot encode before putting them into algorithm\n-   Continuous Variables\n    -   If outliers or heavy skewness, potentially consider transformation\n    -   At a minimum, center the continuous variables after any transformations are made\n\nYou can try clustering on original data or you can try it on PCA of the variables, particularly if the data is big.\n\n:::{.panel-tabset group=\"language\"}\n# R\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# library(gridExtra)\n# library(ggplot2)\n# grid.arrange(\n#     grobs = list(\n#         hist(USArrests$Murder),\n#         hist(USArrests$Assault),\n#         hist(USArrests$Rape),\n#         hist(USArrests$UrbanPop)\n#     ),\n#     ncol = 2\n# )\n```\n:::\n\n\n# Python\n\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}