{
  "hash": "8c6c97fcc01774411a712889da3f5d4d",
  "result": {
    "markdown": "---\ntitle: Mixed and Integer Linear Programming\ndate: 01/19/2024\n---\n\nIn **integer linear programming (ILP)** the objective function and constraints are linear but decision variables must be integers. In **mixed integer linear programming (MILP)** only some decision variables are restricted to integers.\n\nRounding with LP to solve ILP problems can sometimes produce suboptimal solutions. In order to move from LP to ILP problems we need to use a different algorithm: branch and cut.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nfrom gurobipy import Model, GRB\n\nm = Model(\"Chairs\")\n\nc = m.addVar(vtype=GRB.INTEGER, ub=360, name=\"Chair\")\nd = m.addVar(vtype=GRB.INTEGER, ub=300, name=\"Desk\")\nt = m.addVar(vtype=GRB.INTEGER, ub=100, name=\"Table\")\n\nm.setObjective(15 * c + 24 * d + 18 * t, GRB.MAXIMIZE)\nm.addConstr(4 * c + 6 * d + 2 * t <= 1850, \"Fabrication\")\nm.addConstr(3 * c + 5 * d + 7 * t <= 2400, \"Assembly\")\nm.addConstr(3 * c + 2 * d + 4 * t <= 1500, \"Shipping\")\n\nm.optimize()\n\nfor v in m.getVars():\n    print(f\"{v.varName}: {v.x}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRestricted license - for non-production use only - expires 2025-11-24\nGurobi Optimizer version 11.0.0 build v11.0.0rc2 (mac64[arm] - Darwin 23.2.0 23C71)\n\nCPU model: Apple M2 Pro\nThread count: 12 physical cores, 12 logical processors, using up to 12 threads\n\nOptimize a model with 3 rows, 3 columns and 9 nonzeros\nModel fingerprint: 0x40f747a8\nVariable types: 0 continuous, 3 integer (0 binary)\nCoefficient statistics:\n  Matrix range     [2e+00, 7e+00]\n  Objective range  [2e+01, 2e+01]\n  Bounds range     [1e+02, 4e+02]\n  RHS range        [2e+03, 2e+03]\nFound heuristic solution: objective 7050.0000000\nPresolve removed 1 rows and 0 columns\nPresolve time: 0.00s\nPresolved: 2 rows, 3 columns, 6 nonzeros\nVariable types: 0 continuous, 3 integer (0 binary)\nFound heuristic solution: objective 7053.0000000\n\nRoot relaxation: objective 8.400000e+03, 1 iterations, 0.00 seconds (0.00 work units)\n\n    Nodes    |    Current Node    |     Objective Bounds      |     Work\n Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n\n*    0     0               0    8400.0000000 8400.00000  0.00%     -    0s\n\nExplored 1 nodes (1 simplex iterations) in 0.01 seconds (0.00 work units)\nThread count was 12 (of 12 available processors)\n\nSolution count 3: 8400 7053 7050 \n\nOptimal solution found (tolerance 1.00e-04)\nBest objective 8.400000000000e+03, best bound 8.400000000000e+03, gap 0.0000%\nChair: -0.0\nDesk: 275.0\nTable: 100.0\n```\n:::\n:::\n\n\n# Binary Choice Models\n\n**Binary choice models** are a form of ILP with a further restriction on variables to be binary (0, 1).\n\nTwo common binary choice models:\n\n-   **Capital budget problem:** Companies that want to have projects within a given year but are only allocated budget to do a subset of these projects. How do we choose the most optimal subset of projects?\n-   **Set covering problem:** Need to make sure an area is \"covered\" by available units. Example: How many EMS stations are needed to cover Metropolis City?\n\n:::{.callout-caution}\nIn Gurobi, with binary choice models there can be a misleading \"solution count 2\" in the output. There is really only one.\n\n![Gurobi Caution](images/gurobi-binary-caution.png){#fig-gurobi-caution}\n:::\n\n## Set Covering\n\nMetropolis City is divided into 9 districts and there are 7 potential sites for emergency vehicles. Sites can reach some districts, but not others, in the required 3 minutes response time. Location of these sites MUST cover all districts and we would like the have the least amount of sites that can accomplish this.\n\n![Set Covering Example](images/set-covering-example.png){#fig-set-covering-example}\n\n![Set Covering Setup](images/set-covering-setup.png){#fig-set-covering-setup}\n\n## Logical Relationships\n\nBinary variables can also be used to model if-then-else situations.\n\nFive common relationships:\n\n-   At least $m$ items.\n-   At most $n$ items.\n-   Exactly $k$ items.\n-   Mutually exclusive items.\n-   Contingency based items.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}