{
  "hash": "9abf860ad78f9c9cb2a1dc6bcbb9e58d",
  "result": {
    "markdown": "---\ntitle: Introduction to Optimization\ndate: 01/08/2024\n---\n\n# Overview\n\nIn the mathematical sciences, optimization is trying to find the maximum or minimum a function can take. The goal is to find out what values of the \"decision variables\" (input variables) optimize the function.\n\n## Terminology\n\n-   **Decision variables:** Input variables in which we can change to optimize a function.\n-   **Objective function:** Function in which we are trying to optimize. A function of the decision variables.\n-   **Constraints:** Functions of the decision variables that define the constraints of the problems.\n-   **Parameters:** Values inherent in the problem that we are not able to control.\n\n![Optimization Layout](images/optimization-layout.png){#fig-optim-layout}\n\n## Outputs from an Optimization\n\n-   No optimization exists.\n-   More than one solution exists.\n-   There exists one unique solution to the problem.\n-   Other possibilities, but these are the most recognized.\n\n## Types of Optmization Problems\n\n1.  **Linear programming:** Objective function and constraints are linear.\n2.  **Integer linear programming:** Objective function and constraints are linear, but decision variables MUST be integers.\n3.  **Mixed integer linear programming:** Same as ILP but only some decision variables are restricted to integers.\n4.  **Non-linear programming:** Objective functions and constraints are continuous, but not all are linear.\n\n# Linear Programming\n\nThe **feasible region** is a region defined by our constraints. Think of this as the space of possible arrangements of our decision variables.\n\nEasiest solutions for solving a linear programming problem is the **simplex method**.\n\n## Example\n\nDecision variables:\n\n$$\nx_1, x_2\n$$\n\nObjective function:\n\n$$\n2x_1 + 3x_2\n$$\n\nConstraints:\n\n$$\n0 \\leq x_1 \\leq 3\n$$\n\n$$\n0 \\leq x_2 \\leq 3\n$$\n\n![Feasible Region Example](images/feasible-region.png){#fig-feasible-region}\n\n![Feasible Region with Simplex](images/simplex-example.png){#fig-simplex-example}\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nfrom gurobipy import Model, GRB\n\n# Create a new model\nm = Model(\"mip1\")\n\n# Create variables\nc = m.addVar(vtype=GRB.CONTINUOUS, lb=0, name=\"Desk\")\nd = m.addVar(vtype=GRB.CONTINUOUS, lb=0, name=\"Desk\")\nt = m.addVar(vtype=GRB.CONTINUOUS, lb=0, name=\"Table\")\n\n# Set objective\nm.setObjective(15 * c + 24 * d + 18 * t, GRB.MAXIMIZE)\n\n# Add constraints\nm.addConstr(4 * c + 6 * d + 2 * t <= 1850, \"c0\")\nm.addConstr(3 * c + 5 * d + 7 * t <= 2400, \"c1\")\nm.addConstr(3 * c + 2 * d + 4 * t <= 1500, \"c2\")\n\nm.addConstr(c <= 360, \"c3\")\nm.addConstr(d <= 300, \"c4\")\nm.addConstr(t <= 100, \"c5\")\n\nm.optimize()\n\nfor v in m.getVars():\n    print(f\"{v.varName} {v.x}\")\nprint(f\"Obj: {m.objVal}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRestricted license - for non-production use only - expires 2025-11-24\nGurobi Optimizer version 11.0.0 build v11.0.0rc2 (mac64[arm] - Darwin 23.2.0 23C71)\n\nCPU model: Apple M2 Pro\nThread count: 12 physical cores, 12 logical processors, using up to 12 threads\n\nOptimize a model with 6 rows, 3 columns and 12 nonzeros\nModel fingerprint: 0x59066be2\nCoefficient statistics:\n  Matrix range     [1e+00, 7e+00]\n  Objective range  [2e+01, 2e+01]\n  Bounds range     [0e+00, 0e+00]\n  RHS range        [1e+02, 2e+03]\nPresolve removed 3 rows and 0 columns\nPresolve time: 0.00s\nPresolved: 3 rows, 3 columns, 9 nonzeros\n\nIteration    Objective       Primal Inf.    Dual Inf.      Time\n       0    1.6650000e+04   8.046875e+02   0.000000e+00      0s\n       1    8.4000000e+03   0.000000e+00   0.000000e+00      0s\n\nSolved in 1 iterations and 0.00 seconds (0.00 work units)\nOptimal objective  8.400000000e+03\nDesk 0.0\nDesk 275.0\nTable 100.0\nObj: 8400.0\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}