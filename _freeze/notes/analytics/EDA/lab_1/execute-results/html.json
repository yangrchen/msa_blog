{
  "hash": "ec83c2d4e0cee01182fc550bcf54e30a",
  "result": {
    "markdown": "---\ntitle: Lab 1\ndate: 06/27/2023\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(UsingR)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: MASS\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: HistData\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: Hmisc\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'Hmisc'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    format.pval, units\n```\n:::\n\n```{.r .cell-code}\nlibrary(ggplot2)\ndata(normtemp)\nstr(normtemp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t130 obs. of  3 variables:\n $ temperature: num  96.3 96.7 96.9 97 97.1 97.1 97.1 97.2 97.3 97.4 ...\n $ gender     : int  1 1 1 1 1 1 1 1 1 1 ...\n $ hr         : int  70 71 74 80 73 75 82 64 69 70 ...\n```\n:::\n:::\n\n\n> 1. Use the `normtemp` dataset to answer the following:\n>\n> Determine the following statistics for the variable **temperature**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(normtemp$temperature)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  96.30   97.80   98.30   98.25   98.70  100.80 \n```\n:::\n:::\n\n\n> Does **temperature** appear to be normally distributed?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(normtemp, aes(sample = temperature)) +\n    stat_qq(col = \"blue\") +\n    stat_qq_line() +\n    labs(x = \"theoretical\", y = \"observed\")\n```\n\n::: {.cell-output-display}\n![](lab_1_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nBased on the QQ-Plot, temperature appears to be approximately Normal. However, we should be wary that the distribution is tending towards a platykurtic distribution\n\n> Create box plots for **temperature**. Are there any outliers? Display a reference line at 98.6.\n>\n> For horizontal line: `geom_hline(yintercept=98.6)`\n>\n> For vertical line: `geom_vline(xintercept=98.6)`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(normtemp, aes(x = temperature)) +\n    geom_boxplot(outlier.color = \"red\") +\n    labs(x = \"Temperature\", title = \"Box-Plot of Temperature\") +\n    geom_vline(xintercept = 98.6, col = \"blue\")\n```\n\n::: {.cell-output-display}\n![](lab_1_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nThree observations appear to be outliers (colored in red) for temperature. After plotting the reference line at 98.6 degrees, we can visually see that the median is actually lower than 98.6.\n\n> 2. Using the `Ameshousing` dataset from our in-class examples, run some distributional analysis on **Sale_Price**, **Log(Sale_Price)**, and **Gr_Liv_Area**.\n>\n> Create histograms of these three variables.\n>\n> - Overlay a kernel density estimator of the variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(AmesHousing)\n\names <- make_ordinal_ames()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(ames, aes(x = Sale_Price)) +\n    geom_histogram(aes(y = after_stat(!!str2lang(\"density\"))), fill = \"pink\", alpha = 0.4) +\n    geom_density() +\n    labs(x = \"Sales Price (USD)\", title = \"Histogram of Housing Sales Price\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](lab_1_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(ames, aes(x = log(Sale_Price))) +\n    geom_histogram(aes(y = after_stat(!!str2lang(\"density\"))), fill = \"blue\", alpha = 0.4) +\n    geom_density() +\n    labs(x = \"Sales Price (USD)\", title = \"Histogram of Log(Sales Price)\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](lab_1_files/figure-html/unnamed-chunk-6-2.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(ames, aes(x = Gr_Liv_Area)) +\n    geom_histogram(aes(y = after_stat(!!str2lang(\"density\"))), fill = \"purple\", alpha = 0.4) +\n    geom_density() +\n    labs(x = \"Sales Price (USD)\", title = \"Histogram of Living Area\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](lab_1_files/figure-html/unnamed-chunk-6-3.png){width=672}\n:::\n:::\n\n\n> Create a QQ Plot for both **Sale_Price** and **Log(Sale_Price)**. Based on these exploratory procedures, which version of the price information would you say is closer to being normally distributed?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(ames, aes(sample = Sale_Price)) +\n    stat_qq(col = \"blue\", shape = 8, size = 1) +\n    stat_qq_line() +\n    labs(x = \"theoretical\", y = \"observed\", title = \"QQ-Plot of Sale Price\")\n```\n\n::: {.cell-output-display}\n![](lab_1_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(ames, aes(sample = log(Sale_Price))) +\n    stat_qq(col = \"blue\", shape = 8, size = 1) +\n    stat_qq_line()\n```\n\n::: {.cell-output-display}\n![](lab_1_files/figure-html/unnamed-chunk-7-2.png){width=672}\n:::\n\n```{.r .cell-code}\nlabs(x = \"theoretical\", y = \"observed\", title = \"QQ-Plot of Log(Sale Price)\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$x\n[1] \"theoretical\"\n\n$y\n[1] \"observed\"\n\n$title\n[1] \"QQ-Plot of Log(Sale Price)\"\n\nattr(,\"class\")\n[1] \"labels\"\n```\n:::\n:::\n\n\nThe **Log(Sale Price)** QQ-Plot shows a much closer similarity to a Normal distribution than just **Sale Price**.\n\n> 3. Using the `Ameshousing` dataset from our in-class examples, determine the following:\n>\n> What type of variables are each of these columns (**Nominal**, **Ordinal**, or **Continuous/Quantitative**)? Keep in mind that the way they are represented in the R dataset may not be appropriate, so you should make this determination using your *own judgement based on the data you are looking at*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ lubridate 1.9.2     ✔ tibble    3.2.1\n✔ purrr     1.0.1     ✔ tidyr     1.3.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter()    masks stats::filter()\n✖ dplyr::lag()       masks stats::lag()\n✖ dplyr::select()    masks MASS::select()\n✖ dplyr::src()       masks Hmisc::src()\n✖ dplyr::summarize() masks Hmisc::summarize()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nglimpse(ames)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 2,930\nColumns: 81\n$ MS_SubClass        <fct> One_Story_1946_and_Newer_All_Styles, One_Story_1946…\n$ MS_Zoning          <fct> Residential_Low_Density, Residential_High_Density, …\n$ Lot_Frontage       <dbl> 141, 80, 81, 93, 74, 78, 41, 43, 39, 60, 75, 0, 63,…\n$ Lot_Area           <int> 31770, 11622, 14267, 11160, 13830, 9978, 4920, 5005…\n$ Street             <fct> Pave, Pave, Pave, Pave, Pave, Pave, Pave, Pave, Pav…\n$ Alley              <fct> No_Alley_Access, No_Alley_Access, No_Alley_Access, …\n$ Lot_Shape          <ord> Slightly_Irregular, Regular, Slightly_Irregular, Re…\n$ Land_Contour       <ord> Lvl, Lvl, Lvl, Lvl, Lvl, Lvl, Lvl, HLS, Lvl, Lvl, L…\n$ Utilities          <ord> AllPub, AllPub, AllPub, AllPub, AllPub, AllPub, All…\n$ Lot_Config         <fct> Corner, Inside, Corner, Corner, Inside, Inside, Ins…\n$ Land_Slope         <ord> Gtl, Gtl, Gtl, Gtl, Gtl, Gtl, Gtl, Gtl, Gtl, Gtl, G…\n$ Neighborhood       <fct> North_Ames, North_Ames, North_Ames, North_Ames, Gil…\n$ Condition_1        <fct> Norm, Feedr, Norm, Norm, Norm, Norm, Norm, Norm, No…\n$ Condition_2        <fct> Norm, Norm, Norm, Norm, Norm, Norm, Norm, Norm, Nor…\n$ Bldg_Type          <fct> OneFam, OneFam, OneFam, OneFam, OneFam, OneFam, Twn…\n$ House_Style        <fct> One_Story, One_Story, One_Story, One_Story, Two_Sto…\n$ Overall_Qual       <ord> Above_Average, Average, Above_Average, Good, Averag…\n$ Overall_Cond       <ord> Average, Above_Average, Above_Average, Average, Ave…\n$ Year_Built         <int> 1960, 1961, 1958, 1968, 1997, 1998, 2001, 1992, 199…\n$ Year_Remod_Add     <int> 1960, 1961, 1958, 1968, 1998, 1998, 2001, 1992, 199…\n$ Roof_Style         <fct> Hip, Gable, Hip, Hip, Gable, Gable, Gable, Gable, G…\n$ Roof_Matl          <fct> CompShg, CompShg, CompShg, CompShg, CompShg, CompSh…\n$ Exterior_1st       <fct> BrkFace, VinylSd, Wd Sdng, BrkFace, VinylSd, VinylS…\n$ Exterior_2nd       <fct> Plywood, VinylSd, Wd Sdng, BrkFace, VinylSd, VinylS…\n$ Mas_Vnr_Type       <fct> Stone, None, BrkFace, None, None, BrkFace, None, No…\n$ Mas_Vnr_Area       <dbl> 112, 0, 108, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6…\n$ Exter_Qual         <ord> Typical, Typical, Typical, Good, Typical, Typical, …\n$ Exter_Cond         <ord> Typical, Typical, Typical, Typical, Typical, Typica…\n$ Foundation         <fct> CBlock, CBlock, CBlock, CBlock, PConc, PConc, PConc…\n$ Bsmt_Qual          <ord> Typical, Typical, Typical, Typical, Good, Typical, …\n$ Bsmt_Cond          <ord> Good, Typical, Typical, Typical, Typical, Typical, …\n$ Bsmt_Exposure      <ord> Gd, No, No, No, No, No, Mn, No, No, No, No, No, No,…\n$ BsmtFin_Type_1     <ord> BLQ, Rec, ALQ, ALQ, GLQ, GLQ, GLQ, ALQ, GLQ, Unf, U…\n$ BsmtFin_SF_1       <dbl> 2, 6, 1, 1, 3, 3, 3, 1, 3, 7, 7, 1, 7, 3, 3, 1, 3, …\n$ BsmtFin_Type_2     <ord> Unf, LwQ, Unf, Unf, Unf, Unf, Unf, Unf, Unf, Unf, U…\n$ BsmtFin_SF_2       <dbl> 0, 144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1120, 0…\n$ Bsmt_Unf_SF        <dbl> 441, 270, 406, 1045, 137, 324, 722, 1017, 415, 994,…\n$ Total_Bsmt_SF      <dbl> 1080, 882, 1329, 2110, 928, 926, 1338, 1280, 1595, …\n$ Heating            <fct> GasA, GasA, GasA, GasA, GasA, GasA, GasA, GasA, Gas…\n$ Heating_QC         <ord> Fair, Typical, Typical, Excellent, Good, Excellent,…\n$ Central_Air        <fct> Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, …\n$ Electrical         <ord> SBrkr, SBrkr, SBrkr, SBrkr, SBrkr, SBrkr, SBrkr, SB…\n$ First_Flr_SF       <int> 1656, 896, 1329, 2110, 928, 926, 1338, 1280, 1616, …\n$ Second_Flr_SF      <int> 0, 0, 0, 0, 701, 678, 0, 0, 0, 776, 892, 0, 676, 0,…\n$ Low_Qual_Fin_SF    <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ Gr_Liv_Area        <int> 1656, 896, 1329, 2110, 1629, 1604, 1338, 1280, 1616…\n$ Bsmt_Full_Bath     <dbl> 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, …\n$ Bsmt_Half_Bath     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ Full_Bath          <int> 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 3, 2, …\n$ Half_Bath          <int> 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, …\n$ Bedroom_AbvGr      <int> 3, 2, 3, 3, 3, 3, 2, 2, 2, 3, 3, 3, 3, 2, 1, 4, 4, …\n$ Kitchen_AbvGr      <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ Kitchen_Qual       <ord> Typical, Typical, Good, Excellent, Typical, Good, G…\n$ TotRms_AbvGrd      <int> 7, 5, 6, 8, 6, 7, 6, 5, 5, 7, 7, 6, 7, 5, 4, 12, 8,…\n$ Functional         <ord> Typ, Typ, Typ, Typ, Typ, Typ, Typ, Typ, Typ, Typ, T…\n$ Fireplaces         <int> 2, 0, 0, 2, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, …\n$ Fireplace_Qu       <ord> Good, No_Fireplace, No_Fireplace, Typical, Typical,…\n$ Garage_Type        <fct> Attchd, Attchd, Attchd, Attchd, Attchd, Attchd, Att…\n$ Garage_Finish      <ord> Fin, Unf, Unf, Fin, Fin, Fin, Fin, RFn, RFn, Fin, F…\n$ Garage_Cars        <dbl> 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, …\n$ Garage_Area        <dbl> 528, 730, 312, 522, 482, 470, 582, 506, 608, 442, 4…\n$ Garage_Qual        <ord> Typical, Typical, Typical, Typical, Typical, Typica…\n$ Garage_Cond        <ord> Typical, Typical, Typical, Typical, Typical, Typica…\n$ Paved_Drive        <ord> Partial_Pavement, Paved, Paved, Paved, Paved, Paved…\n$ Wood_Deck_SF       <int> 210, 140, 393, 0, 212, 360, 0, 0, 237, 140, 157, 48…\n$ Open_Porch_SF      <int> 62, 0, 36, 0, 34, 36, 0, 82, 152, 60, 84, 21, 75, 0…\n$ Enclosed_Porch     <int> 0, 0, 0, 0, 0, 0, 170, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Three_season_porch <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ Screen_Porch       <int> 0, 120, 0, 0, 0, 0, 0, 144, 0, 0, 0, 0, 0, 0, 140, …\n$ Pool_Area          <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ Pool_QC            <ord> No_Pool, No_Pool, No_Pool, No_Pool, No_Pool, No_Poo…\n$ Fence              <ord> No_Fence, Minimum_Privacy, No_Fence, No_Fence, Mini…\n$ Misc_Feature       <fct> None, None, Gar2, None, None, None, None, None, Non…\n$ Misc_Val           <int> 0, 0, 12500, 0, 0, 0, 0, 0, 0, 0, 0, 500, 0, 0, 0, …\n$ Mo_Sold            <int> 5, 6, 6, 4, 3, 6, 4, 1, 3, 6, 4, 3, 5, 2, 6, 6, 6, …\n$ Year_Sold          <int> 2010, 2010, 2010, 2010, 2010, 2010, 2010, 2010, 201…\n$ Sale_Type          <fct> WD , WD , WD , WD , WD , WD , WD , WD , WD , WD , W…\n$ Sale_Condition     <fct> Normal, Normal, Normal, Normal, Normal, Normal, Nor…\n$ Sale_Price         <int> 215000, 105000, 172000, 244000, 189900, 195500, 213…\n$ Longitude          <dbl> -93.61975, -93.61976, -93.61939, -93.61732, -93.638…\n$ Latitude           <dbl> 42.05403, 42.05301, 42.05266, 42.05125, 42.06090, 4…\n```\n:::\n:::\n\n\n-   Overall_Qual is an ordinal variable as it represents categories that could be ordered based on the rated quality of the house\n-   Lot_Shape is an ordinal variable. It represents categories that could be ordered based on the rated lot shape. For example, Slightly_Irregular could be ordered after Irregular\n-   Heating_QC is an ordinal variable. It represents the categories of heating quality that could be ordered. For example, Excellent would represent a higher order than Good\n-   Lot_Area is a quantitative variable as it represents a continuous quantity of the area of the lot",
    "supporting": [
      "lab_1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}