{
  "hash": "faea662fd63ae360999085e8ad4babf9",
  "result": {
    "markdown": "---\ntitle: Exploratory Data Analysis\ndate: 06/27/2023\ndate-modified: 07/22/2023\n---\n\n\n# What kind of variables do you have?\n\nOur variables are quantities or qualities of interest. These are also called:\n\n-   Attributes\n-   Features\n-   Predictors/Targets\n-   Factors\n-   Inputs/Outputs\n-   Covariates\n\n## Quantitative Variables \n\nQuantitative variables have a quantity value associated with them. These are intervals, numerics or ratios.\n\n-   Time\n-   Temperature\n-   Price\n\n## Categorical Variables \n\nCategorical variables are inherently described by categories instead of quantities.\n\nThere are two types of categorical variables:\n\n-   Nominal\n    -   Soda, Milk, Tea\n-   Ordinal\n    -   Have logical orderings associated with them\n    -   Small, Medium, Large\n    -   Binary IS ordinal regardless of the labels\n\nWith ordinal variables, you can treat them as either nominal or quantitative. You have to make the decision.\n\nCategorical Dummy Variables:\n\nSmall | Medium | Large\n| :-: | :-: | :-:\n1 | 0 | 0\n0 | 1 | 0\n0 | 0 | 1\n\nThe table shows an example of **one-hot encoding**. We can achieve this in R using the `onehot` package:\n\n### R Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(onehot)\nlibrary(reticulate)\n\nuse_condaenv(\"msa\")\n\nset.seed(41)\ndat <- data.frame(\n    y = c(rnorm(10, 2), rnorm(10, 1), rnorm(10, 0)),\n    x1 = factor(rep(c(\"A\", \"B\", \"C\"), each = 10)),\n    x2 = factor(rep(c(\"Z\", \"X\", \"Y\", \"W\", \"V\", \"U\"), each = 5))\n)\n\nencoder <- onehot(dat)\ndummies <- predict(encoder, dat)\nhead(dummies)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            y x1=A x1=B x1=C x2=U x2=V x2=W x2=X x2=Y x2=Z\n[1,] 1.205632    1    0    0    0    0    0    0    0    1\n[2,] 2.197258    1    0    0    0    0    0    0    0    1\n[3,] 3.001704    1    0    0    0    0    0    0    0    1\n[4,] 3.288825    1    0    0    0    0    0    0    0    1\n[5,] 2.905753    1    0    0    0    0    0    0    0    1\n[6,] 2.493667    1    0    0    0    0    0    1    0    0\n```\n:::\n:::\n\n\n### Python Code\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport numpy as np\nfrom numpy import random\nimport pandas as pd\n\nx1 = np.repeat([\"A\", \"B\", \"C\"], 10)\nx2 = np.repeat([\"Z\", \"X\", \"Y\", \"W\", \"V\", \"U\"], 5)\n\nrandom.seed(41)\ny = np.concatenate(\n    [\n        random.normal(2.0, 1.0, 10),\n        random.normal(1.0, 1.0, 10),\n        random.normal(0.0, 1.0, 10),\n    ]\n)\narray = np.array([x1, x2, y])\narray2 = np.transpose(array)\n\ndf = pd.DataFrame(data=array2, columns=[\"x1\", \"x2\", \"y\"])\ndf.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  x1 x2                   y\n0  A  Z  1.7292876769326795\n1  A  Z    2.10484805260974\n2  A  Z   2.250527815723572\n3  A  Z  1.0748000347219233\n4  A  Z   2.567143660285906\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\none_hot_encoded_data = pd.get_dummies(df, columns=[\"x1\", \"x2\"])\none_hot_encoded_data.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                    y  x1_A   x1_B   x1_C  ...   x2_W   x2_X   x2_Y  x2_Z\n0  1.7292876769326795  True  False  False  ...  False  False  False  True\n1    2.10484805260974  True  False  False  ...  False  False  False  True\n2   2.250527815723572  True  False  False  ...  False  False  False  True\n3  1.0748000347219233  True  False  False  ...  False  False  False  True\n4   2.567143660285906  True  False  False  ...  False  False  False  True\n\n[5 rows x 10 columns]\n```\n:::\n:::\n\n\nThe levels are given values if treated quantitatively:\n\nSize | Size\n:-: | :-:\nS | 1\nM | 2\nL | 3\n\nIn addition, we also could do **optimal scaling** to represent the scale of the ordinal variables. This requires a careful definition of a \"1-unit\" change in the variable.\n\nEducation | Education\n:-: | :-:\nNo HS degree | 1\nGED | 2\nHS Diploma | 3\nBachelors | 10\nMasters | 16\nPhD | 20\n\n# Describing Distributions\n\n-   Center/Location\n-   Spread/Variation\n-   Shape\n-   Anomalous Observations\n\n## Measures of Central Tendency\n\n### Mean\n\n$$\n\\bar{x} = \\frac{1}{n} \\sum_{i=1}^n x_i\n$$\n\n### Median\n\nMiddle value. 50th percentile. Unaffected by outliers. In a right-skew, median is lower than the mean. In a left-skew, median is higher than the mean.\n\n### Mode\n\nMost frequent value. Typical for categorical data\n\n## Measures of Location\n\n**Percentiles** are a point, $x_p$, in your data for which $p\\%$ of the data is $\\leq x_p$.\n\n**Quantiles** are the same thing as percentiles. The 10th percentile is the 0.10 quantile.\n\n## Measures of Spread/Dispersion\n\n**Range** is $\\text{max}(data) - \\text{min}(data)$\n\n### Interquartile Range\n\nIQR is the difference between third and first quartile. What is the range of the middle 50% of data.\n\n### Variance $\\sigma^2$ and Standard Deviation \\sigma\n\nDispersion of the data around the mean. Average squared deviation from the mean. \n\n$$\ns^2 = \\frac{1}{n - 1} \\sum_{i=1}^{n} (x_i - \\bar{x})^2\n$$\n\n-   The $n - 1$ comes from the degrees of freedom. In theory this will make this an unbiased estimator of the variance.\n\n## Measure of Shape\n\n### Modality\n\nModality is the number of humps a distribution has. A Normal distribution is unimodal.\n\n### Skew\n\nIs the distribution symmetric? Or does it have a longer tail on one side? \n\n![Left-skew and Right-skew](images/skew.png)\n\n### Kurtosis\n\nDoes the distribution have thicker/thinner tails than a Normal distribution with same mean and variance?\n\nA **leptokurtic** distribution has more data in the tails than a Normal distribution.\n\nA **platykurtic** distribution has less data in the tails than a Normal distribution.\n\nThis only makes sense if you have a symmetric distribution.\n\n## The Normal Distribution\n\nA Normal distribution is a distribution that is\n\n-   Symmetric\n-   Fully defined by the mean and standard deviation\n-   Bell-shaped / Unimodal\n-   Mean = Median = Mode\n-   Asymptotic to the x-axis (bounds are $-\\infty$ and $\\infty$)\n-   Kurtosis = 3 (kurtosis often reported as *excess* kurtosis = kurtosis - 3)\n-   Skew = 0 (there is no skew)\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# | code-fold: true\nfrom scipy.stats import norm\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.linspace(-4, 4, 100)\n\nmean = 0\nsd = 1\n\ny = norm.pdf(x, mean, sd)\n\nplt.plot(x, y)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n# Describing Distributions Part II\n\nUsing the **Ames Real Estate Data Set**, we want to try to predict housing sales prices in Iowa. We will also use `ggplot2` for visualization.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(AmesHousing)\n\names <- make_ordinal_ames()\n```\n:::\n\n\n## Graphical Displays of Distributions\n\n### Histograms\n\nEach bar in the histogram represents a *group* of values (**bin**).\n\nThe height of the bar represents the frequency of percent of values in the bin. You can specify the number of width of the bins as desired.\n\n#### R Code\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(ames, aes(x = Sale_Price / 1000)) +\n    geom_histogram(mapping = aes(y = after_stat(density)), alpha = 0.5) +\n    geom_density(alpha = 0.2) +\n    labs(x = \"Sales Price (Thousands $)\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n#### Python Code\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport seaborn as sns\nfrom pathlib import Path\n\names = r.ames\nax = sns.histplot(x=ames[\"Sale_Price\"] / 1000, kde=True, data=ames, color=\"blue\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n/opt/homebrew/Caskroom/miniconda/base/envs/msa/lib/python3.11/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n  if pd.api.types.is_categorical_dtype(vector):\n/opt/homebrew/Caskroom/miniconda/base/envs/msa/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n```\n:::\n\n```{.python .cell-code}\nax.set(\n    xlabel=\"Sales Price (Thousands $)\",\n    ylabel=\"Frequency\",\n    title=\"Histogram of Sales Price in Thousands of Dollars\",\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nThe distribution is right-skewed so the mean is greater than the median housing price.\n\n### Normal Probability Plots (QQ-Plots)\n\nUsed to compare two distributions, typically to verify that a variable is approx. Normal. \n\nCompare observed quantiles to theoretical quantiles of a Normal distribution with the same mean and variance.\n\nIf the points follow the line diagonal line, the distribution is Normal.\n\n![QQ-Plot Problem Indicators](images/qq-plot-problems.png)\n\n-   Quadratic patterns indicate problems with skew\n-   Cubic patterns indicate problems with kurtosis\n\n#### R Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(ames, aes(sample = Sale_Price / 1000)) +\n    stat_qq() +\n    stat_qq_line() +\n    labs(x = \"theoretical\", y = \"observed\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-3.png){width=672}\n:::\n:::\n\n\n#### Python Code\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport statsmodels.api as sma\n\nsma.qqplot(ames[\"Sale_Price\"] / 1000, line=\"45\", fit=True)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n### Box Plots\n\n![Box Plot](images/box-plot.png)\n\n#### R Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(ames, aes(y = Sale_Price / 1000, x = Central_Air, fill = Central_Air)) +\n    geom_boxplot() +\n    labs(y = \"Sales Price (Thousands $)\", x = \"Central Air\") +\n    scale_fill_brewer(palette = \"Accent\") +\n    theme_classic() +\n    coord_flip()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-3.png){width=672}\n:::\n:::\n\n\n#### Python Code\n\n\n::: {.cell}\n\n```{.python .cell-code}\nax = sns.boxplot(ames, x=ames[\"Sale_Price\"] / 1000)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n/opt/homebrew/Caskroom/miniconda/base/envs/msa/lib/python3.11/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n  if pd.api.types.is_categorical_dtype(vector):\n```\n:::\n\n```{.python .cell-code}\nax.set(\n    xlabel=\"Sales Price (Thousands $)\",\n    title=\"Boxplot of Sales Price in Thousands of Dollars\",\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nax = sns.catplot(ames, x=\"Central_Air\", y=\"Sale_Price\", kind=\"box\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n/opt/homebrew/Caskroom/miniconda/base/envs/msa/lib/python3.11/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n  if pd.api.types.is_categorical_dtype(vector):\n/opt/homebrew/Caskroom/miniconda/base/envs/msa/lib/python3.11/site-packages/seaborn/categorical.py:641: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n  grouped_vals = vals.groupby(grouper)\n/opt/homebrew/Caskroom/miniconda/base/envs/msa/lib/python3.11/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n  if pd.api.types.is_categorical_dtype(vector):\n/opt/homebrew/Caskroom/miniconda/base/envs/msa/lib/python3.11/site-packages/seaborn/categorical.py:641: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n  grouped_vals = vals.groupby(grouper)\n/opt/homebrew/Caskroom/miniconda/base/envs/msa/lib/python3.11/site-packages/seaborn/axisgrid.py:118: UserWarning: The figure layout has changed to tight\n  self._figure.tight_layout(*args, **kwargs)\n```\n:::\n\n```{.python .cell-code}\nplt.show()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-3.png){width=480}\n:::\n:::\n\n\n## Defining Anomalous Observations\n\n### Standard Deviations from the Mean\n\nFor symmetric distributions and particularly for the Normal distribution, it's common to consider observations more than 3 standard deviations from the mean as anomalous.\n\n### Box-Plot Definition\n\nBox plots define outliers as points that are $1.5 \\times IQR$ above the third quartile or less than $1.5 \\times IQR$ below the first quartile.\n\nThere are more definitions but these are the first couple we are considering now.",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}