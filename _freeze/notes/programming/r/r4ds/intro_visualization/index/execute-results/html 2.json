{
  "hash": "240dcaa3e4c574a2e50107faf161dba4",
  "result": {
    "markdown": "---\ntitle: \"r4ds: Visualization Introduction\"\ndate: 06/27/2023\n---\n\n\nThe book focuses on utilizing `ggplot2` to build out data visualizations. The underlying system of the package is the **grammar of graphics** which builds up visuals through a layered approach of defined components.\n\nGrammar of graphics has a layered hierarchy of components:\n\n-   **Data**\n-   **Aesthetics**\n-   **Scale**\n-   **Geometric Objects**\n-   **Statistics**\n-   **Facets**\n-   **Coordinate System**\n\nWe load the `tidyverse` package to have `ggplot` available to us in our workspace.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Dataset and colorblind color palette\nlibrary(palmerpenguins)\nlibrary(ggthemes)\n```\n:::\n\n\n# The Penguins Dataset\n\n> \"Do penguins with longer flippers weigh more or less than penguins with shorter flippers? You probably already have an answer, but try to make your answer precise. What does the relationship between flipper length and body mass look like? Is it positive? Negative? Linear? Nonlinear? Does the relationship vary by the species of the penguin? How about by the island where the penguin lives? Let's create visualizations that we can use to answer these questions.\"\n\n## Terms\n\n-   **Variable** is quantity, quality, property that can be measured.\n-   **Value** is the state of variable when it is measured. Value may change from measurement to measurement.\n-   **Observations** are measurements made under similar conditions. Observations contain several values for different variables. Sometimes called a data point.\n-   **Tabular data** organizes values according to their variables and an observation. Considered *tidy* if every value is placed in its own cell, every variable in its own column, each observation on a row.\n\nIndex | $x_1$ | $x_2$\n--: | --: | :--\n0 | 1 | Apple\n1 | 2 | Banana\n\nTo view a dataframe / tibble:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n:::\n:::\n\n\nUse `glimpse` for a transposed view of the data. This function helps us view the different variables we have in our dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n```\n:::\n:::\n\n\n# ggplot Fundamentals\n\n## Initial ggplot\n\nBegin a plot by calling the `ggplot` function along with the data you have.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nThe next layer in the hierarchy is **aesthetics**. We now add an additional layer that maps visual properties to our dataset variables. We can map `x` to flipper length and `y` to body mass.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nNext layer in the hierarchy is what actually plots the data. We define a **geom** to initialize a geometric object to present data. A point geom is created using `geom_point`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g)) +\n    geom_point()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nRelationship appears to be positive between flipper length and body mass from the plot!\n\n## Aesthetics and Layers\n\nWe can assign a variable to different parameters in the `aes` function to have `ggplot` automatically assign unique values of an aesthetic to a unique level of the variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +\n    geom_point()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}